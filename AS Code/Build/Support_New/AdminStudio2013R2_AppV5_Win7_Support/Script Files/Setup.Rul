//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"
#include "ismsiquery.h"

prototype string GetInstallPath(string, string);
prototype string GetInstallShieldInstallPath(BYREF BOOL);
prototype string GetProductInstallPath(BYREF BOOL, BYREF BOOL);
prototype BackupUpdatedCommonFiles(string);
prototype BackupUpdatedRepackagerSystemFiles(string);
prototype BackupUpdatedRepackagerSupportFiles(string);

prototype SetISSysPaths(string, BYREF string, BYREF string);
prototype SetRepackagerPaths(string, BYREF string, BYREF string);
prototype SetCommonPaths(string, BYREF string);
prototype SetASRootPaths(string, BYREF string);

prototype DeleteUpdatedRepackagerSystemFiles(string);
prototype DeleteUpdatedRepackagerSupportFiles(string);
prototype DeleteUpdatedCommonFiles(string);

export prototype OnMoveData();

BOOL g_bIsSilentInstall;                                  

//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nSize, nSetupType, nBufferSize;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures, szCmdLine;
    BOOL bLicenseAccepted, bFilesInUse, bASClient, bOrphanedPatchInstall, bISInstalled;
    string szInstallPath, szISInstallPath, szISSupportPath, szASRootPath, szASRepackSysPath, szASRepackSupportPath;
    string szISSysPath, szASCommonPath;
    
 begin
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);	
	
	if(CMDLINE % "run_silent") then
 		g_bIsSilentInstall = TRUE;  
	else
 		g_bIsSilentInstall = FALSE;
	endif;

	IFX_SETUP_TITLE = @ID_WELCOME_TITLE;

if(!g_bIsSilentInstall) then

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
    
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = @ID_WELCOME_TITLE;
    szMsg = @ID_WELCOME_MSG;
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    szLicenseFile = SUPPORTDIR ^ "Eula.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, TRUE );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif; 
    
    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
else  
	//Silent install
    Disable(DIALOGCACHE);	
endif;
    
    // Make changes AFTER the user has clicked NEXT
   
	FeatureSelectItem(MEDIA, "ClientOnly", FALSE);
	FeatureSelectItem(MEDIA, "InstallShield", FALSE);
	
	bASClient = FALSE;
	bOrphanedPatchInstall = FALSE; 
	bISInstalled = FALSE;
	
	Disable(LOGGING);
	
	szInstallPath = GetProductInstallPath(bASClient, bOrphanedPatchInstall);
	szISInstallPath = GetInstallShieldInstallPath(bISInstalled);
	

	// A.S. client
	if(bASClient) then 
		SetISSysPaths(szISInstallPath, szISSysPath, szISSupportPath);
		SetRepackagerPaths(szInstallPath, szASRepackSysPath, szASRepackSupportPath);
		SetCommonPaths(szInstallPath, szASCommonPath);
		SetASRootPaths(szInstallPath, szASRootPath);		

		FeatureSelectItem(MEDIA, "ClientOnly", TRUE);
		
		bFilesInUse = Is(FILE_LOCKED, szASRepackSysPath ^ "VirtConv.dll");

		BackupUpdatedRepackagerSystemFiles(szASRepackSysPath);
		BackupUpdatedRepackagerSupportFiles(szASRepackSupportPath);
		BackupUpdatedCommonFiles(szASCommonPath);
				
	endif;
	
	//InstallShield Editor
	if(bISInstalled) then 
		SetISSysPaths(szISInstallPath, szISSysPath, szISSupportPath);
				
		FeatureSelectItem(MEDIA, "InstallShield", TRUE); 
		
		BackupUpdatedRepackagerSystemFiles(szISSysPath);
		BackupUpdatedRepackagerSupportFiles(szISSupportPath);	

	endif;
	
    
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\12.0", "AppV5Update Install Location", REGDB_STRING, szInstallPath, nBufferSize); 
	       
/*	if(bASClient) then
		//Install VC++ 2012 redist
		szCmdLine = "/q /norestart";
		LaunchApplication(SUPPORTDIR ^ "vcredist_x86.exe", szCmdLine, "", SW_HIDE, INFINITE, LAAW_OPTION_WAIT_INCL_CHILD); 
	endif;
*/
    
	Enable(LOGGING);
	
    return 0;
end;   

//---------------------------------------------------------------------------
// OnMoveData
//
// The OnMoveData event is called by OnShowUI to initiate the file
// transfer of the setup.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMoveData()
number	nResult, nMediaFlags;
begin
	// Don't install the DISK1COMPONENT if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION = MAINT_OPTION_NONE ) then
		FeatureSelectItem( MEDIA, DISK1COMPONENT, FALSE );
	endif;
	
    // Updated in 11.5, disable the cancel button during file transfer unless
	// this is non-maintenance mode or repair mode.
    if( MAINTENANCE && ( !REINSTALLMODE || UPDATEMODE ) ) then
        Disable( CANCELBUTTON );
    endif;

if(!g_bIsSilentInstall) then
    // Show Status
	// Note: Start status window at 1 in case CreateInstallationInfo call
	// is lengthy.
	SetStatusWindow( 1, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );
	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();
		
		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
else 
    Disable(DIALOGCACHE);	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();

		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
endif;
end;

//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
begin
if(!g_bIsSilentInstall) then
    
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
else 
    Disable(DIALOGCACHE);	
	return 0;
endif;
	    	
end; 

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType;
    string	szTitle, szMsg;
begin

if(!g_bIsSilentInstall) then
	
	// nType defaults to MODIFY.
	nType = REMOVEALL;

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
    	// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
						
			// Ensure that all previously installed features are removed.
			
			FeatureRemoveAllInMediaAndLog();

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
    
else  
	//Silent install
    Disable(DIALOGCACHE);
 
 	// Ensure that all previously installed features are removed.
 	
	FeatureRemoveAllInMediaAndLog();
		
	return 0;
endif;    
 
end;

//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    BOOL bLicenseAccepted, bFilesInUse, bASClient, bOrphanedPatchInstall, bISInstalled;
    string szInstallPath, szISInstallPath, szISSupportPath, szASRootPath, szASRepackSysPath, szASRepackSupportPath;
    string szISSysPath, szASCommonPath;
    
    begin
    ShowObjWizardPages(NEXT); 
    
    if( REMOVEALLMODE ) then
		szInstallPath = GetProductInstallPath(bASClient, bOrphanedPatchInstall);
		szISInstallPath = GetInstallShieldInstallPath(bISInstalled);

		if(bASClient) then
			// revert .bak files to RTM
			SetISSysPaths(szISInstallPath, szISSysPath, szISSupportPath);
			SetRepackagerPaths(szInstallPath, szASRepackSysPath, szASRepackSupportPath);
			SetCommonPaths(szInstallPath, szASCommonPath);
			SetASRootPaths(szInstallPath, szASRootPath);
			
			if(!bOrphanedPatchInstall) then
				BackupUpdatedRepackagerSystemFiles(szASRepackSysPath);
				BackupUpdatedRepackagerSupportFiles(szASRepackSupportPath);
				BackupUpdatedCommonFiles(szASCommonPath);
			endif;

			//Delete .bak files
			DeleteUpdatedCommonFiles(szASCommonPath);
			DeleteUpdatedRepackagerSystemFiles(szASRepackSysPath);
			DeleteUpdatedRepackagerSupportFiles(szASRepackSupportPath);
		endif; 
		

		if(bISInstalled) then 
			SetISSysPaths(szISInstallPath, szISSysPath, szISSupportPath);

			BackupUpdatedRepackagerSystemFiles(szISSysPath);
			BackupUpdatedRepackagerSupportFiles(szISSupportPath);
			
			DeleteUpdatedRepackagerSystemFiles(szISSysPath);
			DeleteUpdatedRepackagerSupportFiles(szISSupportPath);
		endif;
		
		//Clean up if patch is an orphan
		if(bOrphanedPatchInstall) then	
			//Delete all folders below AdminStudio folder
			DeleteDir(szASRootPath, ALLCONTENTS);				
		endif;
	
		//Remove reg key
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\12.0", "AppV5UPdate Install Location");
		
    endif; 
    
   
    // Added - Version 9.5 - Use appropriate strings for complete
    // uninstall.
    
    if(!g_bIsSilentInstall) then
    
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    endif;
    
    else  
    	//silent install
    	 Disable(DIALOGCACHE);
    	 return 0;
    endif;
end; 

//---------------------------------------------------------------------------
// OnComponentError
//
// The OnComponentError event is called by OnShowUI when the call
// to FeatureTransferData or FeatureMoveData returns an error.
//---------------------------------------------------------------------------
function void OnComponentError()
    STRING szErrFormat, svFeature, szCaption, szDesc;
    NUMBER nError;
    OBJECT ErrorInfo;
begin 

if(!g_bIsSilentInstall) then  

	set ErrorInfo = FeatureErrorInfo();

    szCaption = SdLoadString(IFX_ONCOMPONENTERR_CAPTION);
    if(IsObject(ErrorInfo))then	
       if(IsObject(ErrorInfo.Feature))then
          szErrFormat = SdLoadString(IFX_COMPERROR_MSG);

          svFeature = ErrorInfo.Feature.DisplayName;
          if(svFeature = "")then
             svFeature = ErrorInfo.Feature.Name;
          endif;

          szDesc = ErrorInfo.FileError.Description;
          if(szDesc = "")then
             szDesc = FormatMessage(ErrorInfo.LastError);
			 if(szDesc = "")then
				nError = ErrorInfo.LastError;
				Sprintf(szDesc, "%d", nError);
			 endif;
          endif;

         SprintfBox(MB_OK, szCaption, szErrFormat, svFeature, ErrorInfo.FileGroup, ErrorInfo.FileError.File, szDesc);
       else
         szErrFormat = SdLoadString(IFX_UNKNWN_COMPERROR_MSG);

         SprintfBox(MB_OK, szCaption, szErrFormat, ErrorInfo.LastError);
       endif;
    else
      szDesc = SdLoadString(IFX_COMPERROR_UNKNOWN);
      SprintfBox(MB_OK, szCaption, szDesc);
    endif;
else
	// do nothing 
    Disable(DIALOGCACHE);
endif;
end;

//---------------------------------------------------------------------------
// Internal Functions
//
//---------------------------------------------------------------------------

function string GetProductInstallPath(bASClient, bOrphanedPatchInstall)
	string szPath, szAdminStudioClientPath, szPatchPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szAdminStudioClientPath = GetInstallPath("{F62CBFDA-66EA-4F24-B383-1775A23DD241}", "12.0"); 
	szInstallShieldPath = GetInstallPath("{D8790C21-FD1A-4593-B886-51E5FD49069A}", "20.0");
	
	if(szAdminStudioClientPath = "") then 
		// Look for the patch install itself
		nBufferSize = MAX_PATH;
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio\\12.0", "AppV5Update Install Location", nvType, szPatchPath, nBufferSize);

		if(szPatchPath != "") then
			szPath = szPatchPath;
			bASClient = TRUE;
			bOrphanedPatchInstall = TRUE;
		endif;
	endif;
	
	if(szAdminStudioClientPath = ""  && szPatchPath = "") then
		MessageBox(@ID_NO_PRODUCT_INSTALLED, WARNING);
		abort;
	endif;   

	if(szAdminStudioClientPath != "") then
		szPath = szAdminStudioClientPath; 
		bASClient = TRUE;
	endif;  
	
	TextSubSetValue("<TARGETDIR>", szPath, TRUE);
	
	return szPath;
end;

function string GetInstallShieldInstallPath(bISInstalled)
	string szPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szInstallShieldPath = GetInstallPath("{D8790C21-FD1A-4593-B886-51E5FD49069A}", "20.0");
	
	if(szInstallShieldPath != "") then
		szPath = szInstallShieldPath; 
		bISInstalled = TRUE;
	endif;	
	
	return szPath;
end;

function string GetInstallPath(szProductCode, szVersion)
	string szPath, szASRegProdCode, szISRegProdCode;
	number nBufferSize, nResult, nvType;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	nBufferSize = MAX_PATH;  
	
	RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Code", nvType, szASRegProdCode, nBufferSize); 
	RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Product Code", nvType, szISRegProdCode, nBufferSize);
		
	if(szASRegProdCode = szProductCode) then
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Location", nvType, szPath, nBufferSize);
	else		
		if(szISRegProdCode = szProductCode) then
			RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Install Location", nvType, szPath, nBufferSize);
		endif;
	endif;
	return szPath;
end;  


function SetISSysPaths(szInstallPath, szISSysPath, szISSupportPath)
begin
		szISSysPath = szInstallPath ^ "System";
		TextSubSetValue("<ISSYSTEMDIR>", szISSysPath, TRUE);  
		
		szISSupportPath = szInstallPath ^ "Support";
		TextSubSetValue("<ISSUPPORTDIR>", szISSupportPath, TRUE); 
		 
end; 


function SetRepackagerPaths(szInstallPath, szASRepackSysPath, szASRepackSupportPath)
begin
		szASRepackSysPath = szInstallPath ^ "Repackager" ^ "System";
		TextSubSetValue("<REPACKAGERSYSTEMDIR>", szASRepackSysPath, TRUE); 
		
		szASRepackSupportPath = szInstallPath ^ "Repackager" ^ "Support";
		TextSubSetValue("<REPACKAGERSUPPORTDIR>", szASRepackSupportPath, TRUE); 
				
end;

function SetCommonPaths(szInstallPath, szASCommonPath)
begin
		szASCommonPath = szInstallPath ^ "Common";	
		TextSubSetValue("<COMMONDIR>", szASCommonPath, TRUE); 

end;

function SetASRootPaths(szInstallPath, szASRootPath)
begin
		szASRootPath = szInstallPath;	
		TextSubSetValue("<ASROOTPATH>", szASRootPath, TRUE); 
				
end;

function BackupUpdatedRepackagerSystemFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "VirtConv.dll.bak")) then 
		CopyFile(szPath ^ "VirtConv.dll", szPath ^ "VirtConv.dll.bak");
	else
		CopyFile(szPath ^ "VirtConv.dll.bak", szPath ^ "VirtConv.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "VirtualEditor.exe.bak")) then 
		CopyFile(szPath ^ "VirtualEditor.exe", szPath ^ "VirtualEditor.exe.bak");
	else
		CopyFile(szPath ^ "VirtualEditor.exe.bak", szPath ^ "VirtualEditor.exe");
	endif; 	
	
	if(!Is(FILE_EXISTS, szPath ^ "VpeHelp.xml.bak")) then 
		CopyFile(szPath ^ "VpeHelp.xml", szPath ^ "VpeHelp.xml.bak");
	else
		CopyFile(szPath ^ "VpeHelp.xml.bak", szPath ^ "VpeHelp.xml");
	endif; 

end;

function BackupUpdatedRepackagerSupportFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "AppxManifest.xml.bak")) then 
		CopyFile(szPath ^ "AppxManifest.xml", szPath ^ "AppxManifest.xml.bak");
	else
		CopyFile(szPath ^ "AppxManifest.xml.bak", szPath ^ "AppxManifest.xml");
	endif; 
	
end;

function BackupUpdatedCommonFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ToolkitPro1610vc110.dll.bak2")) then 
		CopyFile(szPath ^ "ToolkitPro1610vc110.dll", szPath ^ "ToolkitPro1610vc110.dll.bak2");  
	else    
		CopyFile(szPath ^ "ToolkitPro1610vc110.dll.bak2", szPath ^ "ToolkitPro1610vc110.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "ToolkitPro1610vc110U.dll.bak")) then 
		CopyFile(szPath ^ "ToolkitPro1610vc110U.dll", szPath ^ "ToolkitPro1610vc110U.dll.bak");  
	else    
		CopyFile(szPath ^ "ToolkitPro1610vc110U.dll.bak", szPath ^ "ToolkitPro1610vc110U.dll");
	endif; 		
	
end;

function DeleteUpdatedRepackagerSystemFiles(szPath)
begin
	DeleteFile(szPath ^ "VirtConv.dll.bak");
	DeleteFile(szPath ^ "VirtualEditor.exe.bak");
	DeleteFile(szPath ^ "VpeHelp.xml.bak");
end;

function DeleteUpdatedRepackagerSupportFiles(szPath)
begin
	DeleteFile(szPath ^ "AppxManifest.xml.bak");
end;

function DeleteUpdatedCommonFiles(szPath)
begin
	DeleteFile(szPath ^ "ToolkitPro1610vc110.dll.bak");
	DeleteFile(szPath ^ "ToolkitPro1610vc110U.dll.bak");
end;  


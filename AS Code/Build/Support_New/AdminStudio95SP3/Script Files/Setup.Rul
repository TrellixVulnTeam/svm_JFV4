//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"
#include "ismsiquery.h"

#define SP1PRODUCTGUID "{153045BB-FD97-4E6E-9576-FB71E0C28220}" 
#define SP2PRODUCTGUID "{D2D14FE7-4FFE-49EC-A043-36C645B3E9D9}" 

prototype string GetInstallPath(string, string);
prototype BackupUpdatedPkgExpertFiles(string);
prototype BackupUpdatedClientSysFiles(string);
prototype BackupUpdatedClientRepackagerFiles(string); 
prototype BackupUpdated0409HelpFiles(string);
prototype BackupUpdatedPkgExpertHelpFiles(string);
prototype BackupUpdatedSharedFiles(string);  
prototype BackupUpdatedSupportFiles(string);
prototype BackupUpdatedSupport0409Files(string);
prototype BackupUpdatedASCommonFiles(string);
prototype BackupUpdatedConflictSolverFiles(string);
prototype BackupRepackagerRenamedFiles(string);
prototype string GetProductInstallPath(BYREF BOOL, BYREF BOOL, BYREF BOOL); 
prototype string GetInstallShieldInstallPath(BYREF BOOL);
prototype SetPkgExpertPaths(string, BYREF string, BYREF string, BYREF string, BYREF string);
prototype SetASClientPaths(string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string);
prototype SetISSysPaths(string, BYREF string);
prototype SetISSupportPaths(string, BYREF string, BYREF string);
prototype DeleteUpdatedClientSysFiles(string);
prototype DeleteUpdatedPkgExpertFiles(string);
prototype DeleteUpdatedPkgExpertHelpFiles(string);
prototype DeleteUpdated0409HelpFiles(string);
prototype DeleteUpdatedClientRepackagerFiles(string);
prototype DeleteUpdatedSharedFiles(string); 
prototype DeleteUpdatedSupportFiles(string);
prototype DeleteUpdatedSupport0409Files(string);
prototype DeleteUpdatedASCommonFiles(string);
prototype DeleteUpdatedConflictSolverFiles(string);
prototype DeleteRepackagerRenamedFiles(string);
prototype UpdateRepackagerRenamedFiles(string);
export prototype OnMoveData();
prototype IsSPInstalled(string, BYREF BOOL);
prototype RemoveSPInstalls();

BOOL g_bIsSilentInstall;                                  

//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nSize, nSetupType, nBufferSize;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures, szCmdLine;
    BOOL bLicenseAccepted, bFilesInUse, bASClient, bSARepackager, bOrphanedPatchInstall, bISInstalled;
    string szInstallPath, szISInstallPath, szSARepackagerPath, szASClientPath, szPkgExpertPath, szASClientSysPath, szASClientSupportPath, szISSupportPath, szISSupport0409Path;
    string szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szISSysPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path;
begin
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);	
	
	if(CMDLINE % "run_silent") then
 		g_bIsSilentInstall = TRUE;  
	else
 		g_bIsSilentInstall = FALSE;
	endif;

	IFX_SETUP_TITLE = @ID_WELCOME_TITLE;
	
if(!g_bIsSilentInstall) then

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
    
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = @ID_WELCOME_TITLE;
    szMsg = @ID_WELCOME_MSG;
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    szLicenseFile = SUPPORTDIR ^ "Eula.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, TRUE );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif; 
    
    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
else  
	//Silent install
    Disable(DIALOGCACHE);	
endif;
    
    // Make changes AFTER the user has clicked NEXT
    
    FeatureSelectItem(MEDIA, "Client_SAR", FALSE);    
	FeatureSelectItem(MEDIA, "PkgExpert", FALSE);
	FeatureSelectItem(MEDIA, "InstallShield", FALSE); 
	FeatureSelectItem(MEDIA, "ClientOnly", FALSE);
	
	bASClient = FALSE;
	bSARepackager = FALSE;
	bOrphanedPatchInstall = FALSE; 
	bISInstalled = FALSE;
	
	Disable(LOGGING);
	
	szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
	szISInstallPath = GetInstallShieldInstallPath(bISInstalled); 
	
	//Add VerCompare check here:
		//Read SP Version reg key and check against current SP Version value
	
	//Check if 9.5 SP1 or SP2 is installed
	RemoveSPInstalls();
	 
	// A.S. client
	if(bASClient) then 
		SetPkgExpertPaths(szInstallPath, szPkgExpertPath, szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath);
		SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path);

		FeatureSelectItem(MEDIA, "PkgExpert", TRUE);
		FeatureSelectItem(MEDIA, "Client_SAR", TRUE);
		FeatureSelectItem(MEDIA, "ClientOnly", TRUE); 
		
		bFilesInUse = Is(FILE_LOCKED, szASClientSysPath ^ "VirtConv.dll");
		
		BackupUpdatedPkgExpertFiles(szPkgExpertPath);
		BackupUpdatedPkgExpertHelpFiles(szPkgExpertHelpPath); 
		BackupUpdated0409HelpFiles(szHelp0409Path);
		BackupUpdatedClientSysFiles(szASClientSysPath);	
		BackupUpdatedSupportFiles(szASClientSupportPath);
		BackupUpdatedSupport0409Files(szASClientSupport0409Path);
		BackupUpdatedClientRepackagerFiles(szASClientRepackagerPath);	
		BackupUpdatedSharedFiles(szASClientSharedPath);
		BackupUpdatedASCommonFiles(szASCommonPath);
		BackupUpdatedConflictSolverFiles(szASConflictSolverPath);              
		BackupRepackagerRenamedFiles(szASClientRepackagerPath); 
	endif;
	
	//InstallShield Editor
	if(bISInstalled) then 
		SetISSysPaths(szISInstallPath, szISSysPath);
		SetISSupportPaths(szISInstallPath, szISSupportPath, szISSupport0409Path); 
		
		FeatureSelectItem(MEDIA, "InstallShield", TRUE); 
		
		BackupUpdatedClientSysFiles(szISSysPath);			
		BackupUpdatedSupportFiles(szISSupportPath);	
		BackupUpdatedSupport0409Files(szISSupport0409Path);		
	endif;   
	
	// Standalone Repackager
	if(bSARepackager) then

		SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path);
		FeatureSelectItem(MEDIA, "Client_SAR", TRUE); 
		
		bFilesInUse = Is(FILE_LOCKED, szASClientSysPath ^ "VirtConv.dll"); 
			
		BackupUpdatedClientSysFiles(szASClientSysPath);	
		BackupUpdatedSupportFiles(szASClientSupportPath);
		BackupUpdatedSupport0409Files(szASClientSupport0409Path);	
		BackupUpdatedClientRepackagerFiles(szASClientRepackagerPath);	
		BackupUpdatedSharedFiles(szASClientSharedPath);
	endif; 
	
	if(bASClient) then
		//Install VC++ 2005 redist
		szCmdLine = "/q:a /c:\"VCREDI~3.EXE /q:a /c:\"\"msiexec /i vcredist.msi /qn\"\" \"";
		LaunchApplication(SUPPORTDIR ^ "vcredist_x86.exe", szCmdLine, "", SW_HIDE, INFINITE, LAAW_OPTION_WAIT_INCL_CHILD); 
	endif;
    
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\9.5", "SP3 Install Location", REGDB_STRING, szInstallPath, nBufferSize); 
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\9.5", "SP Version", REGDB_STRING, "3.0.0.0", nBufferSize); 
       
	Enable(LOGGING);
	    
    return 0;
end;   

//---------------------------------------------------------------------------
// OnMoveData
//
// The OnMoveData event is called by OnShowUI to initiate the file
// transfer of the setup.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMoveData()
number	nResult, nMediaFlags;
begin
	// Don't install the DISK1COMPONENT if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION = MAINT_OPTION_NONE ) then
		FeatureSelectItem( MEDIA, DISK1COMPONENT, FALSE );
	endif;
	
    // Updated in 11.5, disable the cancel button during file transfer unless
	// this is non-maintenance mode or repair mode.
    if( MAINTENANCE && ( !REINSTALLMODE || UPDATEMODE ) ) then
        Disable( CANCELBUTTON );
    endif;

if(!g_bIsSilentInstall) then
    // Show Status
	// Note: Start status window at 1 in case CreateInstallationInfo call
	// is lengthy.
	SetStatusWindow( 1, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );
	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();
		
		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
else 
    Disable(DIALOGCACHE);	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();

		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
endif;
end;

//---------------------------------------------------------------------------
// OnMoved
//
// The OnMoved event is called as a result of the setup calling
// FeatureTransferData or FeatureMoveData. The event is called when
// all file transfer operations are completed except for batch
// self-registration which is performed immediately after this event returns.
// During uninstallation this event sent after uninstallation is completed,
// therefore you should not modify system state in this event.
//---------------------------------------------------------------------------
function OnMoved()
	string szInstallPath, szASClientSharedPath, szRepackagerPath;
	string szSARepackagerPath, szASClientPath, szPkgExpertPath, szASClientSysPath, szASClientSupportPath,szASClientRepackagerPath, szASClientModulesPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path;
	BOOL bASClient, bSARepackager, bOrphanedPatchInstall, bSPInstalled;
begin
	if (!MAINTENANCE) then 
		szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
		
		szASClientSharedPath = WINDISK ^ "AdminStudio Shared"; 
		szRepackagerPath = szInstallPath ^ "Repackager";  
	
		CopyFile(szRepackagerPath ^ "default.ini", szASClientSharedPath ^ "isrepackager.ini");
		
		if (bASClient) then 
			SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path);
			UpdateRepackagerRenamedFiles(szASClientRepackagerPath);
		endif;
		
	endif; 
end;


//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
begin
if(!g_bIsSilentInstall) then
    
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
else 
    Disable(DIALOGCACHE);	
	return 0;
endif;
	    	
end; 

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType;
    string	szTitle, szMsg;
begin

if(!g_bIsSilentInstall) then
	
	// nType defaults to MODIFY.
	nType = MODIFY;

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
    	// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
						
			// Ensure that all previously installed features are removed.
			
			//Check if 9.5 SP1 or SP2 is installed
			RemoveSPInstalls();
			
			FeatureRemoveAllInMediaAndLog();

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
    
else  
	//Silent install
    Disable(DIALOGCACHE);
 
 	// Ensure that all previously installed features are removed.
 	
	//Check if 9.5 SP1 or SP2 is installed
	RemoveSPInstalls();
	
	FeatureRemoveAllInMediaAndLog();
		
	return 0;
endif;    
 
end;

//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    BOOL bASClient, bSARepackager, bOrphanedPatchInstall, bISInstalled;
    string szInstallPath, szISInstallPath, szSARepackagerPath, szASClientPath, szPkgExpertPath, szASClientSysPath, szASClientSupportPath, szISSysPath, szISSupport0409Path;
    string szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szISSupportPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path;
begin
    ShowObjWizardPages(NEXT); 
    
    if( REMOVEALLMODE ) then
		szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
		szISInstallPath = GetInstallShieldInstallPath(bISInstalled); 

		if(bASClient) then
			// revert .bak files to RTM
			SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path);
			SetPkgExpertPaths(szInstallPath, szPkgExpertPath, szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath);

			if(!bOrphanedPatchInstall) then
				BackupUpdatedClientSysFiles(szASClientSysPath);
				BackupUpdatedSupportFiles(szASClientSupportPath);
				BackupUpdatedSupport0409Files(szASClientSupport0409Path);
				BackupUpdatedClientRepackagerFiles(szASClientRepackagerPath);
				BackupUpdatedPkgExpertFiles(szPkgExpertPath);
				BackupUpdatedPkgExpertHelpFiles(szPkgExpertHelpPath); 
				BackupUpdated0409HelpFiles(szHelp0409Path);
				BackupUpdatedSharedFiles(szASClientSharedPath); 
				BackupUpdatedASCommonFiles(szASCommonPath);
				BackupUpdatedConflictSolverFiles(szASConflictSolverPath);
				BackupRepackagerRenamedFiles(szASClientRepackagerPath);
			endif;

			//Delete .bak files
			DeleteUpdatedClientSysFiles(szASClientSysPath);
			DeleteUpdatedSupportFiles(szASClientSupportPath);
			DeleteUpdatedSupport0409Files(szASClientSupport0409Path);
			DeleteUpdatedClientRepackagerFiles(szASClientRepackagerPath);
			DeleteUpdatedPkgExpertFiles(szPkgExpertPath);
			DeleteUpdatedPkgExpertHelpFiles(szPkgExpertHelpPath);
			DeleteUpdated0409HelpFiles(szHelp0409Path);
			DeleteUpdatedSharedFiles(szASClientSharedPath);
			DeleteUpdatedASCommonFiles(szASCommonPath);
			DeleteUpdatedConflictSolverFiles(szASConflictSolverPath);
			DeleteRepackagerRenamedFiles(szASClientRepackagerPath); 
		endif; 
		
		if(bISInstalled) then 
			SetISSysPaths(szISInstallPath, szISSysPath);
			SetISSupportPaths(szISInstallPath, szISSupportPath, szISSupport0409Path);

			BackupUpdatedClientSysFiles(szISSysPath);
			BackupUpdatedSupportFiles(szISSupportPath);
			BackupUpdatedSupport0409Files(szISSupport0409Path);					
			
			DeleteUpdatedClientSysFiles(szISSysPath);
			DeleteUpdatedSupportFiles(szISSupportPath); 
			DeleteUpdatedSupport0409Files(szISSupport0409Path); 					
		endif;
			
		if(bSARepackager) then
			// revert .bak files to RTM			
			SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path);
			if(!bOrphanedPatchInstall) then			
				BackupUpdatedClientSysFiles(szASClientSysPath);
				BackupUpdatedSupportFiles(szASClientSupportPath);
				BackupUpdatedSupport0409Files(szASClientSupport0409Path);		
				BackupUpdatedClientRepackagerFiles(szASClientRepackagerPath);	
				BackupUpdatedSharedFiles(szASClientSharedPath);
            endif;

			//Delete .bak files	
			DeleteUpdatedClientSysFiles(szASClientSysPath);
			DeleteUpdatedSupportFiles(szASClientSupportPath); 
			DeleteUpdatedSupport0409Files(szASClientSupport0409Path);
			DeleteUpdatedClientRepackagerFiles(szASClientRepackagerPath);
			DeleteUpdatedSharedFiles(szASClientSharedPath); 
		endif;

		//Remove reg key
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\9.5", "SP3 Install Location");
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\9.5", "SP Version");

    endif; 
    
   
    // Added - Version 9.5 - Use appropriate strings for complete
    // uninstall.
    
    if(!g_bIsSilentInstall) then
    
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    endif;
    
    else  
    	//silent install
    	 Disable(DIALOGCACHE);
    	 return 0;
    endif;
end; 

//---------------------------------------------------------------------------
// OnComponentError
//
// The OnComponentError event is called by OnShowUI when the call
// to FeatureTransferData or FeatureMoveData returns an error.
//---------------------------------------------------------------------------
function void OnComponentError()
    STRING szErrFormat, svFeature, szCaption, szDesc;
    NUMBER nError;
    OBJECT ErrorInfo;
begin 

if(!g_bIsSilentInstall) then  

	set ErrorInfo = FeatureErrorInfo();

    szCaption = SdLoadString(IFX_ONCOMPONENTERR_CAPTION);
    if(IsObject(ErrorInfo))then	
       if(IsObject(ErrorInfo.Feature))then
          szErrFormat = SdLoadString(IFX_COMPERROR_MSG);

          svFeature = ErrorInfo.Feature.DisplayName;
          if(svFeature = "")then
             svFeature = ErrorInfo.Feature.Name;
          endif;

          szDesc = ErrorInfo.FileError.Description;
          if(szDesc = "")then
             szDesc = FormatMessage(ErrorInfo.LastError);
			 if(szDesc = "")then
				nError = ErrorInfo.LastError;
				Sprintf(szDesc, "%d", nError);
			 endif;
          endif;

         SprintfBox(MB_OK, szCaption, szErrFormat, svFeature, ErrorInfo.FileGroup, ErrorInfo.FileError.File, szDesc);
       else
         szErrFormat = SdLoadString(IFX_UNKNWN_COMPERROR_MSG);

         SprintfBox(MB_OK, szCaption, szErrFormat, ErrorInfo.LastError);
       endif;
    else
      szDesc = SdLoadString(IFX_COMPERROR_UNKNOWN);
      SprintfBox(MB_OK, szCaption, szDesc);
    endif;
else
	// do nothing 
    Disable(DIALOGCACHE);
endif;
end;

//---------------------------------------------------------------------------
// Internal Functions
//
//---------------------------------------------------------------------------

function string GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall)
	string szPath, szSARepackagerPath, szAdminStudioClientPath, szPatchPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szSARepackagerPath = GetInstallPath("{41EC33FB-B183-437D-B30A-9E2A80F549D3}", "9.5");
	szAdminStudioClientPath = GetInstallPath("{CA214A83-2097-48ED-9DAC-1C0C035FF484}", "9.5"); 
	szInstallShieldPath = GetInstallPath("{9CE57049-ECC4-4B93-9DCD-74B117592637}", "16.0");
	
	if(szSARepackagerPath = "" && szAdminStudioClientPath = "") then 
		// Look for the patch install itself
		nBufferSize = MAX_PATH;
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio\\9.5", "SP3 Install Location", nvType, szPatchPath, nBufferSize);

		if(szPatchPath != "") then
			szPath = szPatchPath;
			bASClient = TRUE;
			bOrphanedPatchInstall = TRUE;
		endif;
	endif;
	
	if(szSARepackagerPath = "" && szAdminStudioClientPath = ""  && szPatchPath = "") then
		MessageBox(@ID_NO_PRODUCT_INSTALLED, WARNING);
		abort;
	endif;   

	if(szSARepackagerPath != "") then
		szPath = szSARepackagerPath; 
		bSARepackager = TRUE;
	endif;   
	
	if(szAdminStudioClientPath != "") then
		szPath = szAdminStudioClientPath; 
		bASClient = TRUE;
	endif;  
	
	TextSubSetValue("<TARGETDIR>", szPath, TRUE);
	
	return szPath;
end;

function string GetInstallShieldInstallPath(bISInstalled)
	string szPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szInstallShieldPath = GetInstallPath("{9CE57049-ECC4-4B93-9DCD-74B117592637}", "16.0");
	
	if(szInstallShieldPath != "") then
		szPath = szInstallShieldPath; 
		bISInstalled = TRUE;
	endif;	
	
	return szPath;
end;   

function string GetInstallPath(szProductCode, szVersion)
	string szPath, szASRegProdCode, szISRegProdCode;
	number nBufferSize, nResult, nvType;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	nBufferSize = MAX_PATH;  
	
	RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Code", nvType, szASRegProdCode, nBufferSize); 
	RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Product Code", nvType, szISRegProdCode, nBufferSize);
		
	if(szASRegProdCode = szProductCode) then
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Location", nvType, szPath, nBufferSize);
	else		
		if(szISRegProdCode = szProductCode) then
			RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Install Location", nvType, szPath, nBufferSize);
		endif;
	endif;
	return szPath;
end;  

function IsSPInstalled(szProductCode, bSPInstalled)
	string szPath;
	number nBufferSize, nResult, nvType;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	nBufferSize = MAX_PATH;
	RegDBGetKeyValueEx("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ szProductCode, "InstallLocation", nvType, szPath, nBufferSize); 
	
	if (szPath != "") then
	    bSPInstalled = TRUE;
	else
	    bSPInstalled = FALSE; 
	endif;
end;

function RemoveSPInstalls()
	BOOL bSPInstalled;
begin
	bSPInstalled = FALSE;
	
	//Check if 9.5 SP1 or SP2 is installed
	IsSPInstalled(SP1PRODUCTGUID, bSPInstalled);
	if (bSPInstalled) then
		//Uninstall SP1 - use /auto to hide the uninstall dialogs and progress
		UninstallApplication ( SP1PRODUCTGUID, "/auto", LAAW_OPTION_WAIT_INCL_CHILD ); 
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\9.5", "SP Install Location");
		bSPInstalled = FALSE; 
	endif;
	
	IsSPInstalled(SP2PRODUCTGUID, bSPInstalled); 
	if (bSPInstalled) then
		//Uninstall SP2 - use /auto to hide the uninstall dialogs and progress		
		UninstallApplication ( SP2PRODUCTGUID, "/auto", LAAW_OPTION_WAIT_INCL_CHILD );
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\9.5", "SP Install Location");
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\9.5", "SP2 Install Location");
		bSPInstalled = FALSE;
	endif;
end; 

function SetPkgExpertPaths(szInstallPath, szPkgExpertPath, szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath)
begin
		szPkgExpertPath = szInstallPath ^ "PackageExpert";
		TextSubSetValue("<PKGEXPUPDATEPATH>", szPkgExpertPath, TRUE);
		
		szPkgExpertHelpPath = szInstallPath ^ "PackageExpert" ^ "TestHelpTopics";
		TextSubSetValue("<PKGEXPHELPUPDATEPATH>", szPkgExpertHelpPath, TRUE);	
			
		szHelp0409Path = szInstallPath ^ "Program" ^ "0409";
		TextSubSetValue("<HELP0409UPDATEPATH>", szHelp0409Path, TRUE);  
end;   

function SetASClientPaths(szInstallPath, szASClientSysPath, szASClientSupportPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path)
begin
		szASClientSysPath = szInstallPath ^ "Repackager" ^ "System";
		TextSubSetValue("<ASCLIENTSYSPATH>", szASClientSysPath, TRUE);  
		
		szASClientSupportPath = szInstallPath ^ "Repackager" ^ "Support";
		TextSubSetValue("<ASCLIENTSUPPORTPATH>", szASClientSupportPath, TRUE);   
		
		szASClientSupport0409Path = szInstallPath ^ "Repackager" ^ "Support" ^ "0409";
		TextSubSetValue("<ASCLIENTSUPPORT0409PATH>", szASClientSupport0409Path, TRUE); 
		
		szASClientRepackagerPath = szInstallPath ^ "Repackager";
		TextSubSetValue("<ASCLIENTREPACKAGERPATH>", szASClientRepackagerPath, TRUE);     
		
		szASClientModulesPath = szInstallPath ^ "Repackager" ^ "Modules" ^ "i386";
		TextSubSetValue("<ASCLIENTMODULESPATH>", szASClientModulesPath, TRUE); 
		
		szASCommonPath = szInstallPath ^ "Common";
		TextSubSetValue("<ASCOMMONPATH>", szASCommonPath, TRUE);  
		
		szASConflictSolverPath = szInstallPath ^ "ConflictSolver";
		TextSubSetValue("<ASCONFLICTSOLVERPATH>", szASConflictSolverPath, TRUE); 
		
		szASClientSharedPath = WINDISK ^ "AdminStudio Shared";
		TextSubSetValue("<ASCLIENTSHAREDPATH>", szASClientSharedPath, TRUE); 
end; 

function SetISSysPaths(szInstallPath, szISSysPath)
begin
		szISSysPath = szInstallPath ^ "System";
		TextSubSetValue("<ISSYSPATH>", szISSysPath, TRUE);  
end;   

function SetISSupportPaths(szInstallPath, szISSupportPath, szISSupport0409Path)
begin
		szISSupportPath = szInstallPath ^ "Support";
		TextSubSetValue("<ISSUPPORTDIR>", szISSupportPath, TRUE);
				
		szISSupport0409Path = szInstallPath ^ "Support" ^ "0409";
		TextSubSetValue("<ISSUPPORT0409DIR>", szISSupport0409Path, TRUE);  
end;  

function BackupUpdatedClientSysFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "IsMMUpdater2.dll.bak3")) then 
		CopyFile(szPath ^ "IsMMUpdater2.dll", szPath ^ "IsMMUpdater2.dll.bak3");  
	else    
		CopyFile(szPath ^ "IsMMUpdater2.dll.bak3", szPath ^ "IsMMUpdater2.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "VirtConv.dll.bak3")) then 
		CopyFile(szPath ^ "VirtConv.dll", szPath ^ "VirtConv.dll.bak3");
	else
		CopyFile(szPath ^ "VirtConv.dll.bak3", szPath ^ "VirtConv.dll");
	endif;       

	if(!Is(FILE_EXISTS, szPath ^ "AppV.xml.bak3")) then 
		CopyFile(szPath ^ "AppV.xml", szPath ^ "AppV.xml.bak3");
	else
		CopyFile(szPath ^ "AppV.xml.bak3", szPath ^ "AppV.xml");	
	endif;  
	
	if(!Is(FILE_EXISTS, szPath ^ "Package.ini.bak3")) then 
		CopyFile(szPath ^ "Package.ini", szPath ^ "Package.ini.bak3");
	else
		CopyFile(szPath ^ "Package.ini.bak3", szPath ^ "Package.ini");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "Thinstall.xml.bak3")) then 
		CopyFile(szPath ^ "Thinstall.xml", szPath ^ "Thinstall.xml.bak3");
	else
		CopyFile(szPath ^ "Thinstall.xml.bak3", szPath ^ "Thinstall.xml");	
	endif;  
	
	if(!Is(FILE_EXISTS, szPath ^ "ISWIBuild.dll.bak3")) then 
		CopyFile(szPath ^ "ISWIBuild.dll", szPath ^ "ISWIBuild.dll.bak3");
	else
		CopyFile(szPath ^ "ISWIBuild.dll.bak3", szPath ^ "ISWIBuild.dll");	
	endif;
end;     

function BackupUpdatedClientRepackagerFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "default.ini.bak3")) then 
		CopyFile(szPath ^ "default.ini", szPath ^ "default.ini.bak3");
	else
	    CopyFile(szPath ^ "default.ini.bak3", szPath ^ "default.ini");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "islc.exe.bak3")) then 
		CopyFile(szPath ^ "islc.exe", szPath ^ "islc.exe.bak3"); 
	else
		CopyFile(szPath ^ "islc.exe.bak3", szPath ^ "islc.exe");	
	endif;  
	
	if(!Is(FILE_EXISTS, szPath ^ "NiClnt32.dll.bak3")) then 
		CopyFile(szPath ^ "NiClnt32.dll", szPath ^ "NiClnt32.dll.bak3");
	else
		CopyFile(szPath ^ "NiClnt32.dll.bak3", szPath ^ "NiClnt32.dll");	
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "NIRT.dll.bak3")) then 
		CopyFile(szPath ^ "NIRT.dll", szPath ^ "NIRT.dll.bak3");
	else
		CopyFile(szPath ^ "NIRT.dll.bak3", szPath ^ "NIRT.dll");	
	endif;			
	
	if(!Is(FILE_EXISTS, szPath ^ "Options.ini.bak3")) then 
		CopyFile(szPath ^ "Options.ini", szPath ^ "Options.ini.bak3");
	else
		CopyFile(szPath ^ "Options.ini.bak3", szPath ^ "Options.ini");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "OSSnapshot.exe.bak3")) then 
		CopyFile(szPath ^ "OSSnapshot.exe", szPath ^ "OSSnapshot.exe.bak3");
	else
		CopyFile(szPath ^ "OSSnapshot.exe.bak3", szPath ^ "OSSnapshot.exe");	
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Repack.exe.bak3")) then 
		CopyFile(szPath ^ "Repack.exe", szPath ^ "Repack.exe.bak3");
	else
		CopyFile(szPath ^ "Repack.exe.bak3", szPath ^ "Repack.exe");	
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "SpyEngine.dll.bak3")) then 
		CopyFile(szPath ^ "SpyEngine.dll", szPath ^ "SpyEngine.dll.bak3");
	else
		CopyFile(szPath ^ "SpyEngine.dll.bak3", szPath ^ "SpyEngine.dll");	
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "SpyTree.dll.bak3")) then 
		CopyFile(szPath ^ "SpyTree.dll", szPath ^ "SpyTree.dll.bak3");
	else
		CopyFile(szPath ^ "SpyTree.dll.bak3", szPath ^ "SpyTree.dll");	
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "xniSpy32.dll.bak3")) then 
		CopyFile(szPath ^ "xniSpy32.dll", szPath ^ "xniSpy32.dll.bak3");
	else
	    CopyFile(szPath ^ "xniSpy32.dll.bak3", szPath ^ "xniSpy32.dll");
	endif;		
					
	if(!Is(FILE_EXISTS, szPath ^ "InstallMonitor.dll.bak3")) then 
		CopyFile(szPath ^ "InstallMonitor.dll", szPath ^ "InstallMonitor.dll.bak3");
	else
	    CopyFile(szPath ^ "InstallMonitor.dll.bak3", szPath ^ "InstallMonitor.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "AACX.exe.bak3")) then 
		CopyFile(szPath ^ "AACX.exe", szPath ^ "AACX.exe.bak3");
	else
	    CopyFile(szPath ^ "AACX.exe.bak3", szPath ^ "AACX.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AACXIDE.exe.bak3")) then 
		CopyFile(szPath ^ "AACXIDE.exe", szPath ^ "AACXIDE.exe.bak3");
	else
	    CopyFile(szPath ^ "AACXIDE.exe.bak3", szPath ^ "AACXIDE.exe");
	endif;					
	
end; 

function BackupUpdatedPkgExpertFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "VistaTest.dll.bak3")) then 
		CopyFile(szPath ^ "VistaTest.dll", szPath ^ "VistaTest.dll.bak3");
	else
	    CopyFile(szPath ^ "VistaTest.dll.bak3", szPath ^ "VistaTest.dll");
	endif;   

	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.MSI.dll.bak3")) then 
		CopyFile(szPath ^ "AdminStudio.MSI.dll", szPath ^ "AdminStudio.MSI.dll.bak3");
	else
	    CopyFile(szPath ^ "AdminStudio.MSI.dll.bak3", szPath ^ "AdminStudio.MSI.dll");
	endif;	 
	
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpert.exe.bak3")) then 
		CopyFile(szPath ^ "PackageExpert.exe", szPath ^ "PackageExpert.exe.bak3");
	else
	    CopyFile(szPath ^ "PackageExpert.exe.bak3", szPath ^ "PackageExpert.exe");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "TestEngine.dll.bak3")) then 
		CopyFile(szPath ^ "TestEngine.dll", szPath ^ "TestEngine.dll.bak3");
	else
	    CopyFile(szPath ^ "TestEngine.dll.bak3", szPath ^ "TestEngine.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "TestEngine.Support.dll.bak3")) then 
		CopyFile(szPath ^ "TestEngine.Support.dll", szPath ^ "TestEngine.Support.dll.bak3");
	else
	    CopyFile(szPath ^ "TestEngine.Support.dll.bak3", szPath ^ "TestEngine.Support.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "ICETest.dll.bak3")) then 
		CopyFile(szPath ^ "ICETest.dll", szPath ^ "ICETest.dll.bak3");
	else
	    CopyFile(szPath ^ "ICETest.dll.bak3", szPath ^ "ICETest.dll");
	endif;	
end;     
     
function BackupUpdated0409HelpFiles(szPath)
begin  
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpert.htm.bak3")) then 
		CopyFile(szPath ^ "PackageExpert.htm", szPath ^ "PackageExpert.htm.bak3");
	else
		CopyFile(szPath ^ "PackageExpert.htm.bak3", szPath ^ "PackageExpert.htm");	
	endif;			
	
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpertDiagram.gif.bak3")) then 
		CopyFile(szPath ^ "PackageExpertDiagram.gif", szPath ^ "PackageExpertDiagram.gif.bak3");
	else
	    CopyFile(szPath ^ "PackageExpertDiagram.gif.bak3", szPath ^ "PackageExpertDiagram.gif");
	endif;	
end;  

function BackupUpdatedPkgExpertHelpFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Available Tests.htm.bak3")) then 
		CopyFile(szPath ^ "Available Tests.htm", szPath ^ "Available Tests.htm.bak3");
	else
	    CopyFile(szPath ^ "Available Tests.htm.bak3", szPath ^ "Available Tests.htm");
	endif;     
	
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpert_Home.htm.bak3")) then 
		CopyFile(szPath ^ "PackageExpert_Home.htm", szPath ^ "PackageExpert_Home.htm.bak3");
	else
	    CopyFile(szPath ^ "PackageExpert_Home.htm.bak3", szPath ^ "PackageExpert_Home.htm");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpertDiagram.gif.bak3")) then 
		CopyFile(szPath ^ "PackageExpertDiagram.gif", szPath ^ "PackageExpertDiagram.gif.bak3");
	else
		CopyFile(szPath ^ "PackageExpertDiagram.gif.bak3", szPath ^ "PackageExpertDiagram.gif");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "ForceReboot.htm.bak3")) then 
		CopyFile(szPath ^ "ForceReboot.htm", szPath ^ "ForceReboot.htm.bak3");
	else
		CopyFile(szPath ^ "ForceReboot.htm.bak3", szPath ^ "ForceReboot.htm");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "Nested Custom Actions.htm.bak3")) then 
		CopyFile(szPath ^ "Nested Custom Actions.htm", szPath ^ "Nested Custom Actions.htm.bak3");
	else
		CopyFile(szPath ^ "Nested Custom Actions.htm.bak3", szPath ^ "Nested Custom Actions.htm");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "Restart Manager Files In Use Dialog.htm.bak3")) then 
		CopyFile(szPath ^ "Restart Manager Files In Use Dialog.htm", szPath ^ "Restart Manager Files In Use Dialog.htm.bak3");
	else
		CopyFile(szPath ^ "Restart Manager Files In Use Dialog.htm.bak3", szPath ^ "Restart Manager Files In Use Dialog.htm");	
	endif;
end;

function BackupUpdatedASCommonFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ASFileOpen.dll.bak3")) then 
		CopyFile(szPath ^ "ASFileOpen.dll", szPath ^ "ASFileOpen.dll.bak3");  
	else    
		CopyFile(szPath ^ "ASFileOpen.dll.bak3", szPath ^ "ASFileOpen.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "ISUIConflictServices.dll.bak3")) then 
		CopyFile(szPath ^ "ISUIConflictServices.dll", szPath ^ "ISUIConflictServices.dll.bak3");  
	else    
		CopyFile(szPath ^ "ISUIConflictServices.dll.bak3", szPath ^ "ISUIConflictServices.dll");
	endif; 	
end;  

function BackupUpdatedSharedFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "isrepackager.ini.bak3")) then 
		CopyFile(szPath ^ "isrepackager.ini", szPath ^ "isrepackager.ini.bak3");
	else
		CopyFile(szPath ^ "isrepackager.ini.bak3", szPath ^ "isrepackager.ini");
	endif;  
	
	if(!Is(FILE_EXISTS, szPath ^ "isrepackager.context.ini.bak3")) then 
		CopyFile(szPath ^ "isrepackager.context.ini", szPath ^ "isrepackager.context.ini.bak3");
	else
	    CopyFile(szPath ^ "isrepackager.context.ini.bak3", szPath ^ "isrepackager.context.ini");
	endif;	
end; 

function BackupUpdatedSupportFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "AppVLauncher.exe.bak3")) then 
		CopyFile(szPath ^ "AppVLauncher.exe", szPath ^ "AppVLauncher.exe.bak3");  
	else    
		CopyFile(szPath ^ "AppVLauncher.exe.bak3", szPath ^ "AppVLauncher.exe");
	endif;  
	
	if(!Is(FILE_EXISTS, szPath ^ "watermark.exe.bak3")) then 
		CopyFile(szPath ^ "watermark.exe", szPath ^ "watermark.exe.bak3");  
	else    
		CopyFile(szPath ^ "watermark.exe.bak3", szPath ^ "watermark.exe");
	endif; 	
end;  

function BackupUpdatedSupport0409Files(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Settings.xml.bak3")) then 
		CopyFile(szPath ^ "Settings.xml", szPath ^ "Settings.xml.bak3");  
	else    
		CopyFile(szPath ^ "Settings.xml.bak3", szPath ^ "Settings.xml");
	endif; 
end;

function BackupUpdatedConflictSolverFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ISCMIDE.exe.bak3")) then 
		CopyFile(szPath ^ "ISCMIDE.exe", szPath ^ "ISCMIDE.exe.bak3");  
	else    
		CopyFile(szPath ^ "ISCMIDE.exe.bak3", szPath ^ "ISCMIDE.exe");
	endif; 
end;

function BackupRepackagerRenamedFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Admin5.bld.bak3")) then 
		CopyFile(szPath ^ "Admin5.bld", szPath ^ "Admin5.bld.bak3");  
	else    
		CopyFile(szPath ^ "Admin5.bld.bak3", szPath ^ "Admin5.bld");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework.dll.bak3")) then 
		CopyFile(szPath ^ "AdminUIFramework.dll", szPath ^ "AdminUIFramework.dll.bak3");  
	else    
		CopyFile(szPath ^ "AdminUIFramework.dll.bak3", szPath ^ "AdminUIFramework.dll");
	endif;
end;

function DeleteUpdatedClientSysFiles(szPath)
begin  
	DeleteFile(szPath ^ "IsMMUpdater2.dll.bak3");
	DeleteFile(szPath ^ "VirtConv.dll.bak3");
	DeleteFile(szPath ^ "AppV.xml.bak3");
	DeleteFile(szPath ^ "Thinstall.xml.bak3");   
	DeleteFile(szPath ^ "Package.ini.bak3");	
	DeleteFile(szPath ^ "ISWIBuild.dll.bak3");
end;

function DeleteUpdatedPkgExpertFiles(szPath)
begin
	DeleteFile(szPath ^ "VistaTest.dll.bak3"); 
	DeleteFile(szPath ^ "AdminStudio.MSI.dll.bak3");
	DeleteFile(szPath ^ "PackageExpert.exe.bak3");
	DeleteFile(szPath ^ "TestEngine.dll.bak3");
	DeleteFile(szPath ^ "TestEngine.Support.dll.bak3");
	DeleteFile(szPath ^ "ICETest.dll.bak3");
end;

function DeleteUpdatedPkgExpertHelpFiles(szPath)
begin
	DeleteFile(szPath ^ "Available Tests.htm.bak3"); 
	DeleteFile(szPath ^ "PackageExpert_Home.htm.bak3");
	DeleteFile(szPath ^ "PackageExpertDiagram.gif.bak3");
	DeleteFile(szPath ^ "ForceReboot.htm.bak3");
	DeleteFile(szPath ^ "Nested Custom Actions.htm.bak3");
	DeleteFile(szPath ^ "Restart Manager Files In Use Dialog.htm.bak3");
end;

function DeleteUpdated0409HelpFiles(szPath)
begin
	DeleteFile(szPath ^ "PackageExpert.htm.bak3");
	DeleteFile(szPath ^ "PackageExpertDiagram.gif.bak3");
end;

function DeleteUpdatedClientRepackagerFiles(szPath)
begin
	DeleteFile(szPath ^ "default.ini.bak3"); 
	DeleteFile(szPath ^ "islc.exe.bak3");
	DeleteFile(szPath ^ "NiClnt32.dll.bak3"); 
	DeleteFile(szPath ^ "NIRT.dll.bak3");
	DeleteFile(szPath ^ "Options.ini.bak3");
	DeleteFile(szPath ^ "OSSnapshot.exe.bak3");
	DeleteFile(szPath ^ "Repack.exe.bak3");
	DeleteFile(szPath ^ "SpyEngine.dll.bak3");
	DeleteFile(szPath ^ "SpyTree.dll.bak3");
	DeleteFile(szPath ^ "xniSpy32.dll.bak3"); 
	DeleteFile(szPath ^ "InstallMonitor.dll.bak3");
	DeleteFile(szPath ^ "AACX.exe.bak3");
	DeleteFile(szPath ^ "AACXIDE.exe.bak3");
end;

function DeleteUpdatedSharedFiles(szPath)
begin
	DeleteFile(szPath ^ "isrepackager.ini.bak3");
	DeleteFile(szPath ^ "isrepackager.context.ini.bak3");
end;  

function DeleteUpdatedSupportFiles(szPath)
begin
	DeleteFile(szPath ^ "AppVLauncher.exe.bak3"); 
	DeleteFile(szPath ^ "watermark.exe.bak3");
end; 

function DeleteUpdatedSupport0409Files(szPath)
begin
	DeleteFile(szPath ^ "Settings.xml.bak3");
end;

function DeleteUpdatedASCommonFiles(szPath)
begin
	DeleteFile(szPath ^ "ASFileOpen.dll.bak3");
	DeleteFile(szPath ^ "ISUIConflictServices.dll.bak3");
end;  

function DeleteUpdatedConflictSolverFiles(szPath)
begin
	DeleteFile(szPath ^ "ISCMIDE.exe.bak3");
end;

function DeleteRepackagerRenamedFiles(szPath)
begin
	DeleteFile(szPath ^ "Admin5.bld.bak3");   
	DeleteFile(szPath ^ "AdminUIFramework.dll.bak3");
end;

function UpdateRepackagerRenamedFiles(szPath)
begin
	if(Is(FILE_EXISTS, szPath ^ "AdminUIFramework.dll")) then 
		CopyFile(szPath ^ "Admin5.bld", szPath ^ "AdminUIFramework.dll");
		DeleteFile(szPath ^ "Admin5.bld");  
	endif;
end;


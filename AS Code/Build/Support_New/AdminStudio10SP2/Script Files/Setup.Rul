//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"
#include "ismsiquery.h"

#define SP1PRODUCTGUID "{E74D8F4D-39BC-41C5-AFFE-7126C0D7E9AA}" 


prototype string GetInstallPath(string, string);
prototype string GetInstallShieldInstallPath(BYREF BOOL);
prototype string GetProductInstallPath(BYREF BOOL, BYREF BOOL, BYREF BOOL);
prototype BackupUpdatedConflictSolverFiles(string);
prototype BackupUpdatedASRootFiles(string);
prototype BackupUpdatedASWebFiles(string);
prototype BackupUpdatedASPreDeployFiles(string);
prototype BackupUpdatedASACPFiles(string);
prototype BackupUpdatedConflictSolverSupportFiles(string);
prototype BackupUpdatedConflictSolverRepDefFiles(string);
prototype BackupUpdatedConflictSolverRepDefStorProcFiles(string);
prototype BackupUpdatedClientSysFiles(string);
prototype BackupUpdatedASCommonFiles(string);
prototype BackupUpdatedRepackagerFiles(string);
prototype BackupUpdatedSupportFiles(string);
prototype BackupUpdatedSupportSQLFiles(string);
prototype BackupUpdatedFlexwrapServerFiles(string);
prototype BackupUpdatedHelpFiles(string);
prototype BackupUpdatedPkgExpertFiles(string);
prototype BackupUpdatedJobMgrEngineFiles(string);
prototype BackupUpdatedConflictSolverRDLCFiles(string, BOOL);
prototype CheckWebInstall(string, BYREF BOOL); 
prototype CheckACPInstall(string, BYREF BOOL); 
prototype SetASClientPaths(string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string, BYREF string);
prototype SetASRootPaths(string, BYREF string);
prototype SetASWebPaths(string, BYREF string, BYREF string, BYREF string, BYREF string);
prototype SetASACPPaths(string, BYREF string, BYREF string, BYREF string, BYREF string);
prototype SetASSupportPaths(string, BYREF string, BYREF string);
prototype SetISSysPaths(string, BYREF string);
prototype SetASRepackagerPaths(string, BYREF string, BYREF string);
prototype SetASCommonPaths(string, BYREF string);
prototype SetASFWServerPaths(string, BYREF string);
prototype SetISProg0409Paths(string, BYREF string);
prototype SetASHelp0409Paths(string, BYREF string);
prototype DeleteUpdatedConflictSolverFiles(string);
prototype DeleteASRootFiles(string);
prototype DeleteASWebFiles(string);
prototype DeleteASPreDeployFiles(string);
prototype DeleteASACPFiles(string);
prototype DeleteUpdatedClientSysFiles(string);
prototype DeleteUpdatedClientRepackagerFiles(string);
prototype DeleteUpdatedASCommonFiles(string);
prototype DeleteRepackagerRenamedFiles(string);
prototype DeleteUpdatedFWServerFiles(string);
prototype DeleteUpdatedSupportSQLFiles(string);
prototype DeleteUpdatedSupportFiles(string);
prototype DeleteUpdatedConflictSolverRepDefStorProcFiles(string);
prototype DeleteUpdatedConflictSolverRepDefFiles(string);
prototype DeleteUpdatedConflictSolverSupportFiles(string);
prototype DeleteUpdatedHelpFiles(string);
prototype DeleteUpdatedPkgExpertFiles(string);
prototype DeleteUpdatedJobMgrEngineFiles(string);
prototype DeleteUpdatedConflictSolverRDLCFiles(string);
prototype UpdateRegKey();
prototype UpdateRepackagerRenamedFiles(string);
prototype IsSPInstalled(string, BYREF BOOL);
prototype RemoveSPInstalls();
export prototype OnMoveData();


BOOL g_bIsSilentInstall;                                  

//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nSize, nSetupType, nBufferSize;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures, szCmdLine;
    BOOL bLicenseAccepted, bFilesInUse, bASClient, bSARepackager, bOrphanedPatchInstall, bISInstalled, bASWebFeature, bASACPFeature;
    string szInstallPath, szISInstallPath, szSARepackagerPath, szASClientPath, szPkgExpertPath, szASClientSysPath, szASClientSupportPath, szISSupportPath, szISSupport0409Path, szASRootPath, szASACPPartnerPath, szASACPGraphicsPath;
    string szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szISSysPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path,szASPkGExpertPath;
    string szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASACPPath, szASACPFixPath,szASRepackagerPath,szASFWServerPath,szISProg0409Path,szASHelp0409Path,szASJobMgrEnginePath,szASWebPDTClientPath;
    string szASConflictSolverSupportPath,szASConflictSolverRepDefPath,szASConflictSolverStorProcPath,szASConflictSolverRDLCPath,szASConflictSolverPkgViewsPath,szASRepackSysPath,szASSupportPath, szASSupportSQLPath;
begin
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);	
	
	if(CMDLINE % "run_silent") then
 		g_bIsSilentInstall = TRUE;  
	else
 		g_bIsSilentInstall = FALSE;
	endif;

	IFX_SETUP_TITLE = @ID_WELCOME_TITLE;

if(!g_bIsSilentInstall) then

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
    
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = @ID_WELCOME_TITLE;
    szMsg = @ID_WELCOME_MSG;
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    szLicenseFile = SUPPORTDIR ^ "Eula.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, TRUE );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif; 
    
    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
else  
	//Silent install
    Disable(DIALOGCACHE);	
endif;
    
    // Make changes AFTER the user has clicked NEXT
   
	FeatureSelectItem(MEDIA, "ClientOnly", FALSE);
	FeatureSelectItem(MEDIA, "WebTools", FALSE);
	FeatureSelectItem(MEDIA, "ACP", FALSE);
	FeatureSelectItem(MEDIA, "InstallShield", FALSE);
	FeatureSelectItem(MEDIA, "SAR", FALSE);
	
	bASClient = FALSE;
	bASWebFeature = FALSE;
	bOrphanedPatchInstall = FALSE; 
	bISInstalled = FALSE;
	bSARepackager = FALSE;

	Disable(LOGGING);
	
	szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
	szISInstallPath = GetInstallShieldInstallPath(bISInstalled);
	CheckWebInstall(szInstallPath, bASWebFeature);

	//Check if 10.0 SP1 is installed and uninstall
	RemoveSPInstalls();
	
	// A.S. client
	if(bASClient) then 
		SetASClientPaths(szInstallPath, szASConflictSolverPath,szASConflictSolverSupportPath,szASConflictSolverRepDefPath,szASConflictSolverStorProcPath,szASConflictSolverRDLCPath,szASConflictSolverPkgViewsPath,szASPkGExpertPath,szASJobMgrEnginePath);
		SetISSysPaths(szInstallPath, szISSysPath);
		SetASSupportPaths(szInstallPath, szASSupportPath, szASSupportSQLPath);
		SetASRepackagerPaths(szInstallPath, szASRepackagerPath,szASRepackSysPath);
		SetASRootPaths(szInstallPath, szASRootPath);
		SetASCommonPaths(szInstallPath, szASCommonPath);
		SetASFWServerPaths(szInstallPath, szASFWServerPath);
		SetISProg0409Paths(szInstallPath, szISProg0409Path);
		SetASHelp0409Paths(szInstallPath, szASHelp0409Path);
		SetASWebPaths(szInstallPath, szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASWebPDTClientPath);
		SetASACPPaths(szInstallPath, szASACPPath, szASACPFixPath, szASACPPartnerPath, szASACPGraphicsPath);

		FeatureSelectItem(MEDIA, "ClientOnly", TRUE);
		FeatureSelectItem(MEDIA, "ACP", TRUE); 
		
		bFilesInUse = Is(FILE_LOCKED, szASConflictSolverPath ^ "ISCMIDE.exe");

		BackupUpdatedConflictSolverFiles(szASConflictSolverPath);
		BackupUpdatedConflictSolverSupportFiles(szASConflictSolverSupportPath);
		BackupUpdatedConflictSolverRepDefFiles(szASConflictSolverRepDefPath);
		BackupUpdatedConflictSolverRepDefStorProcFiles(szASConflictSolverStorProcPath);
		BackupUpdatedRepackagerFiles(szASRepackagerPath);
		BackupUpdatedClientSysFiles(szASRepackSysPath);
		BackupUpdatedSupportFiles(szASSupportPath);
		BackupUpdatedSupportSQLFiles(szASSupportSQLPath);              
		BackupUpdatedASRootFiles(szASRootPath);
		BackupUpdatedASCommonFiles(szASCommonPath);
		BackupUpdatedFlexwrapServerFiles(szASFWServerPath);
		BackupUpdatedHelpFiles(szASHelp0409Path);
		BackupUpdatedPkgExpertFiles(szASPkGExpertPath);
		BackupUpdatedJobMgrEngineFiles(szASJobMgrEnginePath);
		BackupUpdatedConflictSolverRDLCFiles(szASConflictSolverRDLCPath,TRUE);
		BackupUpdatedASPreDeployFiles(szASWebPDTClientPath); 
		BackupUpdatedASACPFiles(szASACPPath);		
				
		UpdateRegKey();
	endif;
	
	// A.S. web feature
	if(bASWebFeature) then 
		SetASWebPaths(szInstallPath, szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASWebPDTClientPath);
		
		FeatureSelectItem(MEDIA, "WebTools", TRUE); 
		
		bFilesInUse = Is(FILE_LOCKED, szASWebDistPath ^ "ASShare.dll");

		BackupUpdatedASWebFiles(szASWebDistPath);              
		BackupUpdatedASWebFiles(szASWebPDTReportPath); 
		BackupUpdatedASWebFiles(szASWebPDTServicePath);
	endif;
	
	//InstallShield Editor
	if(bISInstalled) then 
		SetISSysPaths(szISInstallPath, szISSysPath);
				
		FeatureSelectItem(MEDIA, "InstallShield", TRUE); 
		
		BackupUpdatedClientSysFiles(szISSysPath);	
		BackupUpdatedHelpFiles(szISProg0409Path);		
	endif;
	
	// Standalone Repackager
	if(bSARepackager) then
		SetASRepackagerPaths(szInstallPath, szASRepackagerPath,szASRepackSysPath);
		FeatureSelectItem(MEDIA, "SAR", TRUE); 
		
		bFilesInUse = Is(FILE_LOCKED,szASRepackSysPath ^ "VirtConv.dll"); 

		BackupUpdatedRepackagerFiles(szASRepackagerPath);	
		BackupUpdatedClientSysFiles(szASRepackSysPath);
	endif; 	
    
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\10.0", "SP2 Install Location", REGDB_STRING, szInstallPath, nBufferSize); 
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\10.0", "SP Version", REGDB_STRING, "2.0.0.0", nBufferSize); 
       
	// 32-bit mode on IIS ASP.NET
	// Check for 64-bit machine
	if ((SYSINFO.bIsWow64) && 
		//IIS installed
		(RegDBKeyExist ("SYSTEM\CurrentControlSet\Services\W3SVC\Parameters") || RegDBKeyExist ("SOFTWARE\Microsoft\InetStp")) &&
		// and .NET (2.0) installed
		(RegDBKeyExist ("SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727"))) then
			szCmdLine = WINSYSDISK ^ "\\" ^ "inetpub" ^ "adminscripts" ^ "adsutil.vbs" + " SET W3SVC/AppPools/Enable32bitAppOnWin64 1";
			LaunchApplication(WINSYSDIR ^ "cscript.exe", szCmdLine, "", SW_HIDE, INFINITE, LAAW_OPTION_WAIT_INCL_CHILD); 
	endif;

	Enable(LOGGING);
	
    return 0;
end;   

//---------------------------------------------------------------------------
// OnMoveData
//
// The OnMoveData event is called by OnShowUI to initiate the file
// transfer of the setup.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMoveData()
number	nResult, nMediaFlags;
begin
	// Don't install the DISK1COMPONENT if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION = MAINT_OPTION_NONE ) then
		FeatureSelectItem( MEDIA, DISK1COMPONENT, FALSE );
	endif;
	
    // Updated in 11.5, disable the cancel button during file transfer unless
	// this is non-maintenance mode or repair mode.
    if( MAINTENANCE && ( !REINSTALLMODE || UPDATEMODE ) ) then
        Disable( CANCELBUTTON );
    endif;

if(!g_bIsSilentInstall) then
    // Show Status
	// Note: Start status window at 1 in case CreateInstallationInfo call
	// is lengthy.
	SetStatusWindow( 1, "" );
	Enable( STATUSEX );
	StatusUpdate( ON, 100 );
	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();
		
		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
else 
    Disable(DIALOGCACHE);	
	// Create the uninstall infomation (after displaying the progress dialog)
	// Don't create uninstall information if MAINT_OPTION_NONE was specified.
	if( MAINT_OPTION != MAINT_OPTION_NONE ) then
		CreateInstallationInfo(); 
	endif;

	// Move Data
	nResult = FeatureTransferData( MEDIA );
	
    // Moved in 11.0, Check for failure before creating uninstall key.
    // Handle move data error and abort if error occured.
	if( nResult < ISERR_SUCCESS ) then
		OnComponentError();
		abort;
	endif;	    

	// Create uninstall key, if DISK1COMPONENT was installed.
	if( IFX_DISK1INSTALLED ) then

		// Store text-subs for maintenance mode later, only do this when
		// disk 1 is installed. Note that any text-subs that are updated after
        // this call will not be remembered during maintenance mode.
		FeatureSaveTarget(""); 

		// Write uninstall information.
		MaintenanceStart();

		// Customize Uninstall Information
		//OnCustomizeUninstInfo();

	endif;

    // Disable Status
	Disable( STATUSEX );
endif;
end;

//---------------------------------------------------------------------------
// OnMoved
//
// The OnMoved event is called as a result of the setup calling
// FeatureTransferData or FeatureMoveData. The event is called when
// all file transfer operations are completed except for batch
// self-registration which is performed immediately after this event returns.
// During uninstallation this event sent after uninstallation is completed,
// therefore you should not modify system state in this event.
//---------------------------------------------------------------------------
function OnMoved()
	string szInstallPath, szASRepackagerPath, szASRepackSysPath;
	BOOL bASClient, bSARepackager, bOrphanedPatchInstall, bSPInstalled;
begin

	if (!MAINTENANCE) then 
		szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
		
		if (bASClient) then 
			SetASRepackagerPaths(szInstallPath, szASRepackagerPath, szASRepackSysPath);
			UpdateRepackagerRenamedFiles(szASRepackagerPath);
		endif;
		
	endif; 
end;


//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
begin
if(!g_bIsSilentInstall) then
    
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
else 
    Disable(DIALOGCACHE);	
	return 0;
endif;
	    	
end; 

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType;
    string	szTitle, szMsg;
begin

if(!g_bIsSilentInstall) then
	
	// nType defaults to MODIFY.
	nType = REMOVEALL;

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
    	// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
						
			// Ensure that all previously installed features are removed.
			
			//Check if 10.0 SP1 is installed and uninstall
			RemoveSPInstalls();
			
			FeatureRemoveAllInMediaAndLog();

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
    
else  
	//Silent install
    Disable(DIALOGCACHE);
 
 	// Ensure that all previously installed features are removed.
 	
	//Check if 10.0 SP1 is installed and uninstall
	RemoveSPInstalls();
	
	FeatureRemoveAllInMediaAndLog();
		
	return 0;
endif;    
 
end;

//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    BOOL bASClient, bSARepackager, bOrphanedPatchInstall, bISInstalled, bASWebFeature, bASACPFeature;
    string szInstallPath, szISInstallPath, szSARepackagerPath, szASClientPath, szPkgExpertPath, szASClientSysPath, szASClientSupportPath, szISSysPath, szISSupport0409Path, szASRootPath, szASACPPartnerPath, szASACPGraphicsPath;
    string szPkgExpertHelpPath, szHelp0409Path, szCommonHelpPath, szASClientRepackagerPath, szASClientModulesPath, szASClientSharedPath, szISSupportPath, szASCommonPath, szASConflictSolverPath, szASClientSupport0409Path,szASPkGExpertPath;
    string szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASACPPath, szASACPFixPath,szASRepackagerPath,szASFWServerPath,szISProg0409Path,szASHelp0409Path,szASJobMgrEnginePath, szASWebPDTClientPath;
    string szASConflictSolverSupportPath,szASConflictSolverRepDefPath,szASConflictSolverStorProcPath,szASConflictSolverRDLCPath,szASConflictSolverPkgViewsPath,szASRepackSysPath,szASSupportPath, szASSupportSQLPath;
begin
    ShowObjWizardPages(NEXT); 
    
    if( REMOVEALLMODE ) then
		szInstallPath = GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall);
		szISInstallPath = GetInstallShieldInstallPath(bISInstalled);
		CheckWebInstall(szInstallPath, bASWebFeature);

		if(bASClient) then
			// revert .bak files to RTM
			SetASClientPaths(szInstallPath, szASConflictSolverPath,szASConflictSolverSupportPath,szASConflictSolverRepDefPath,szASConflictSolverStorProcPath,szASConflictSolverRDLCPath,szASConflictSolverPkgViewsPath,szASPkGExpertPath,szASJobMgrEnginePath);
			SetISSysPaths(szInstallPath, szISSysPath);
			SetASSupportPaths(szInstallPath, szASSupportPath, szASSupportSQLPath);
			SetASRepackagerPaths(szInstallPath, szASRepackagerPath,szASRepackSysPath);
			SetASRootPaths(szInstallPath, szASRootPath);
			SetASCommonPaths(szInstallPath, szASCommonPath);
			SetASFWServerPaths(szInstallPath, szASFWServerPath);
			SetISProg0409Paths(szInstallPath, szISProg0409Path);
			SetASHelp0409Paths(szInstallPath, szASHelp0409Path);
			SetASWebPaths(szInstallPath, szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASWebPDTClientPath);
			SetASACPPaths(szInstallPath, szASACPPath, szASACPFixPath, szASACPPartnerPath, szASACPGraphicsPath);
			
			if(!bOrphanedPatchInstall) then
				BackupUpdatedConflictSolverFiles(szASConflictSolverPath);
				BackupUpdatedConflictSolverSupportFiles(szASConflictSolverSupportPath);
				BackupUpdatedConflictSolverRepDefFiles(szASConflictSolverRepDefPath);
				BackupUpdatedConflictSolverRepDefStorProcFiles(szASConflictSolverStorProcPath);
				BackupUpdatedRepackagerFiles(szASRepackagerPath);
				BackupUpdatedClientSysFiles(szASRepackSysPath);
				BackupUpdatedSupportFiles(szASSupportPath);
				BackupUpdatedSupportSQLFiles(szASSupportSQLPath);              
				BackupUpdatedASRootFiles(szASRootPath);
				BackupUpdatedASCommonFiles(szASCommonPath);
				BackupUpdatedFlexwrapServerFiles(szASFWServerPath);
				BackupUpdatedHelpFiles(szASHelp0409Path);
				BackupUpdatedPkgExpertFiles(szASPkGExpertPath);
				BackupUpdatedJobMgrEngineFiles(szASJobMgrEnginePath);
				BackupUpdatedConflictSolverRDLCFiles(szASConflictSolverRDLCPath,FALSE);
				BackupUpdatedASPreDeployFiles(szASWebPDTClientPath);
				BackupUpdatedASACPFiles(szASACPPath); 
			endif;

			//Delete .bak files
			DeleteASRootFiles(szASRootPath);		
			DeleteUpdatedConflictSolverFiles(szASConflictSolverPath);
			DeleteUpdatedASCommonFiles(szASCommonPath);
			DeleteUpdatedClientRepackagerFiles(szASRepackagerPath);
			DeleteUpdatedFWServerFiles(szASFWServerPath);
			DeleteUpdatedSupportSQLFiles(szASSupportSQLPath);
			DeleteUpdatedSupportFiles(szASSupportPath);
			DeleteUpdatedConflictSolverRepDefStorProcFiles(szASConflictSolverStorProcPath);
			DeleteUpdatedConflictSolverRepDefFiles(szASConflictSolverRepDefPath);
			DeleteUpdatedConflictSolverSupportFiles(szASConflictSolverSupportPath);
			DeleteUpdatedHelpFiles(szASHelp0409Path);
			DeleteUpdatedConflictSolverRDLCFiles(szASConflictSolverRDLCPath);
			DeleteUpdatedClientSysFiles(szASRepackSysPath);
			DeleteUpdatedPkgExpertFiles(szASPkGExpertPath);
			DeleteUpdatedJobMgrEngineFiles(szASJobMgrEnginePath);
			DeleteASPreDeployFiles(szASWebPDTClientPath);	
			DeleteASWebFiles(szASWebDistPath);		
			DeleteASWebFiles(szASWebPDTReportPath);
			DeleteASWebFiles(szASWebPDTServicePath);
			DeleteASACPFiles(szASACPPath);
		endif; 
		
		if(bASWebFeature) then
			// revert .bak files to RTM
			SetASWebPaths(szInstallPath, szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASWebPDTClientPath);
			
			if(!bOrphanedPatchInstall) then
				BackupUpdatedASWebFiles(szASWebDistPath);              
				BackupUpdatedASWebFiles(szASWebPDTReportPath); 
				BackupUpdatedASWebFiles(szASWebPDTServicePath);
			endif;

			//Delete .bak files
			DeleteASWebFiles(szASWebDistPath);		
			DeleteASWebFiles(szASWebPDTReportPath);
			DeleteASWebFiles(szASWebPDTServicePath);
		endif;
		
		if(bISInstalled) then 
			SetISSysPaths(szISInstallPath, szISSysPath);

			BackupUpdatedClientSysFiles(szISSysPath);
			BackupUpdatedHelpFiles(szISProg0409Path);
			
			DeleteUpdatedClientSysFiles(szISSysPath);
			DeleteUpdatedHelpFiles(szISProg0409Path);
		endif;
		
		if(bSARepackager) then
			// revert .bak files to RTM			
			SetASRepackagerPaths(szInstallPath, szASRepackagerPath,szASRepackSysPath);
			FeatureSelectItem(MEDIA, "SAR", TRUE); 
			
			BackupUpdatedRepackagerFiles(szASRepackagerPath);	
			BackupUpdatedClientSysFiles(szASRepackSysPath);

			//Delete .bak files	
			DeleteUpdatedClientRepackagerFiles(szASRepackagerPath);
			DeleteUpdatedClientSysFiles(szASRepackSysPath);
			 
		endif;
		
		//Clean up if patch is an orphan
		if(bOrphanedPatchInstall) then	
			//Delete all folders below AdminStudio folder
			DeleteDir(szASRootPath, ALLCONTENTS);				
		endif;
	
		//Remove reg key
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\10.0", "SP2 Install Location");
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\10.0", "SP Version");

    endif; 
    
   
    // Added - Version 9.5 - Use appropriate strings for complete
    // uninstall.
    
    if(!g_bIsSilentInstall) then
    
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    endif;
    
    else  
    	//silent install
    	 Disable(DIALOGCACHE);
    	 return 0;
    endif;
end; 

//---------------------------------------------------------------------------
// OnComponentError
//
// The OnComponentError event is called by OnShowUI when the call
// to FeatureTransferData or FeatureMoveData returns an error.
//---------------------------------------------------------------------------
function void OnComponentError()
    STRING szErrFormat, svFeature, szCaption, szDesc;
    NUMBER nError;
    OBJECT ErrorInfo;
begin 

if(!g_bIsSilentInstall) then  

	set ErrorInfo = FeatureErrorInfo();

    szCaption = SdLoadString(IFX_ONCOMPONENTERR_CAPTION);
    if(IsObject(ErrorInfo))then	
       if(IsObject(ErrorInfo.Feature))then
          szErrFormat = SdLoadString(IFX_COMPERROR_MSG);

          svFeature = ErrorInfo.Feature.DisplayName;
          if(svFeature = "")then
             svFeature = ErrorInfo.Feature.Name;
          endif;

          szDesc = ErrorInfo.FileError.Description;
          if(szDesc = "")then
             szDesc = FormatMessage(ErrorInfo.LastError);
			 if(szDesc = "")then
				nError = ErrorInfo.LastError;
				Sprintf(szDesc, "%d", nError);
			 endif;
          endif;

         SprintfBox(MB_OK, szCaption, szErrFormat, svFeature, ErrorInfo.FileGroup, ErrorInfo.FileError.File, szDesc);
       else
         szErrFormat = SdLoadString(IFX_UNKNWN_COMPERROR_MSG);

         SprintfBox(MB_OK, szCaption, szErrFormat, ErrorInfo.LastError);
       endif;
    else
      szDesc = SdLoadString(IFX_COMPERROR_UNKNOWN);
      SprintfBox(MB_OK, szCaption, szDesc);
    endif;
else
	// do nothing 
    Disable(DIALOGCACHE);
endif;
end;

//---------------------------------------------------------------------------
// Internal Functions
//
//---------------------------------------------------------------------------

function string GetProductInstallPath(bASClient, bSARepackager, bOrphanedPatchInstall)
	string szPath, szSARepackagerPath, szAdminStudioClientPath, szPatchPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szSARepackagerPath = GetInstallPath("{73CAFDE3-5070-404A-A76A-FE2231B34E5E}", "10.0");
	szAdminStudioClientPath = GetInstallPath("{0E4FCE9C-5868-48B1-95DF-85B4B34418AA}", "10.0"); 
	szInstallShieldPath = GetInstallPath("{6FD6E369-45A1-4114-818F-4AD179916DB9}", "17.0");
	
	if(szSARepackagerPath = "" && szAdminStudioClientPath = "") then 
		// Look for the patch install itself
		nBufferSize = MAX_PATH;
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio\\10.0", "SP2 Install Location", nvType, szPatchPath, nBufferSize);

		if(szPatchPath != "") then
			szPath = szPatchPath;
			bASClient = TRUE;
			bOrphanedPatchInstall = TRUE;
		endif;
	endif;
	
	if(szSARepackagerPath = "" && szAdminStudioClientPath = ""  && szPatchPath = "") then
		MessageBox(@ID_NO_PRODUCT_INSTALLED, WARNING);
		abort;
	endif;   

	if(szSARepackagerPath != "") then
		szPath = szSARepackagerPath; 
		bSARepackager = TRUE;
	endif;   
	
	if(szAdminStudioClientPath != "") then
		szPath = szAdminStudioClientPath; 
		bASClient = TRUE;
	endif;  
	
	TextSubSetValue("<TARGETDIR>", szPath, TRUE);
	
	return szPath;
end;

function string GetInstallShieldInstallPath(bISInstalled)
	string szPath, szInstallShieldPath; 
	number nBufferSize, nvType;
begin
	szInstallShieldPath = GetInstallPath("{6FD6E369-45A1-4114-818F-4AD179916DB9}", "17.0");
	
	if(szInstallShieldPath != "") then
		szPath = szInstallShieldPath; 
		bISInstalled = TRUE;
	endif;	
	
	return szPath;
end;

function string GetInstallPath(szProductCode, szVersion)
	string szPath, szASRegProdCode, szISRegProdCode;
	number nBufferSize, nResult, nvType;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	nBufferSize = MAX_PATH;  
	
	RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Code", nvType, szASRegProdCode, nBufferSize); 
	RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Product Code", nvType, szISRegProdCode, nBufferSize);
		
	if(szASRegProdCode = szProductCode) then
		RegDBGetKeyValueEx("Software\\InstallShield\\AdminStudio" ^ szVersion, "Product Location", nvType, szPath, nBufferSize);
	else		
		if(szISRegProdCode = szProductCode) then
			RegDBGetKeyValueEx("Software\\InstallShield" ^ szVersion ^ "Professional", "Install Location", nvType, szPath, nBufferSize);
		endif;
	endif;
	return szPath;
end;  

function CheckWebInstall(szPath, bASWebFeature)
begin
	if(Is(FILE_EXISTS, szPath ^ "ASDistribution" ^ "bin" ^ "AdminHelper.dll")) then 
		bASWebFeature = TRUE;
	endif;
end; 

function CheckACPInstall(szPath, bASACPFeature)
begin
	if(Is(FILE_EXISTS, szPath ^ "ACP" ^ "aokCrwl.dll")) then 
		bASACPFeature = TRUE;
	endif;
end; 

function RemoveSPInstalls()
	BOOL bSPInstalled;
begin
	bSPInstalled = FALSE;
	
	//Check if 10.0 SP1 is installed and uninstall
	IsSPInstalled(SP1PRODUCTGUID, bSPInstalled);
	if (bSPInstalled) then
		//Uninstall SP1 - use /auto to hide the uninstall dialogs and progress
		UninstallApplication ( SP1PRODUCTGUID, "/auto", LAAW_OPTION_WAIT_INCL_CHILD ); 
		RegDBDeleteValue("Software\\InstallShield\\AdminStudio\\10.0", "SP1 Install Location");
		bSPInstalled = FALSE; 
	endif;

end;

function IsSPInstalled(szProductCode, bSPInstalled)
	string szPath;
	number nBufferSize, nResult, nvType;
begin
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	nBufferSize = MAX_PATH;
	RegDBGetKeyValueEx("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ szProductCode, "InstallLocation", nvType, szPath, nBufferSize); 
	
	if (szPath != "") then
	    bSPInstalled = TRUE;
	else
	    bSPInstalled = FALSE; 
	endif;
end;

function SetASClientPaths(szInstallPath,szASConflictSolverPath,szASConflictSolverSupportPath,szASConflictSolverRepDefPath,szASConflictSolverStorProcPath,szASConflictSolverRDLCPath,szASConflictSolverPkgViewsPath,szASPkGExpertPath,szASJobMgrEnginePath)
begin
		szASConflictSolverPath = szInstallPath ^ "ConflictSolver";
		TextSubSetValue("<ASCONFLICTSOLVERPATH>", szASConflictSolverPath, TRUE);
		
		szASConflictSolverSupportPath = szInstallPath ^ "ConflictSolver" ^ "Support";
		TextSubSetValue("<ASCONFLICTSOLVERSUPPORTPATH>", szASConflictSolverSupportPath, TRUE);

		szASConflictSolverRepDefPath = szInstallPath ^ "ConflictSolver" ^ "ReportDefinition";
		TextSubSetValue("<ASCONFLICTSOLVERREPDEFPATH>", szASConflictSolverRepDefPath, TRUE);
				
		szASConflictSolverStorProcPath = szInstallPath ^ "ConflictSolver" ^ "ReportDefinition" ^ "StoredProcedures";
		TextSubSetValue("<ASCONFLICTSOLVERSTORPROCPATH>", szASConflictSolverStorProcPath, TRUE);
		
		szASConflictSolverRDLCPath = szInstallPath ^ "ConflictSolver" ^ "ReportDefinition" ^ "RDLC";
		TextSubSetValue("<ASCONFLICTSOLVERRDLCPATH>", szASConflictSolverRDLCPath, TRUE);
		
		szASConflictSolverPkgViewsPath = szInstallPath ^ "ConflictSolver" ^ "ReportDefinition" ^ "RDLC" ^ "PackageViews";
		TextSubSetValue("<ASCONFLICTSOLVERPKGVIEWSPATH>", szASConflictSolverPkgViewsPath, TRUE);								
		
		szASPkGExpertPath = szInstallPath ^ "PackageExpert";
		TextSubSetValue("<ASPKGEXPERTPATH>", szASPkGExpertPath, TRUE);
		
		szASJobMgrEnginePath = szInstallPath ^ "Job Manager Engine";
		TextSubSetValue("<ASJOBMGRENGINEPATH>", szASJobMgrEnginePath, TRUE);
end;

function SetASWebPaths(szInstallPath, szASWebDistPath, szASWebPDTReportPath, szASWebPDTServicePath, szASWebPDTClientPath)
begin
		szASWebDistPath = szInstallPath ^ "ASDistribution" ^ "bin";
		TextSubSetValue("<ASWEBDISTPATH>", szASWebDistPath, TRUE); 
		
		szASWebPDTReportPath = szInstallPath ^ "PreDeployTest" ^ "Reports" ^ "Bin";
		TextSubSetValue("<ASWEBPDTREPORTPATH>", szASWebPDTReportPath, TRUE);
		
		szASWebPDTServicePath = szInstallPath ^ "PreDeployTest" ^ "Service" ^ "Bin";
		TextSubSetValue("<ASWEBPDTSERVICEPATH>", szASWebPDTServicePath, TRUE);
		
		szASWebPDTClientPath = szInstallPath ^ "PreDeployTest" ^ "Client";
		TextSubSetValue("<ASWEBPDTCLIENTPATH>", szASWebPDTClientPath, TRUE);
end;

function SetASRootPaths(szInstallPath, szASRootPath)
begin
		szASRootPath = szInstallPath;	
		TextSubSetValue("<ASROOTPATH>", szASRootPath, TRUE); 
				
end;

function SetASACPPaths(szInstallPath, szASACPPath, szASACPFixPath, szASACPPartnerPath, szASACPGraphicsPath)
begin
		szASACPPath = szInstallPath ^ "ACP";
		TextSubSetValue("<ASACPPATH>", szASACPPath, TRUE); 
		
		szASACPFixPath = szInstallPath ^ "ACP" ^ "Fix" ^ "1.0.9.0";
		TextSubSetValue("<ASACPFIXPATH>", szASACPFixPath, TRUE);
		
		szASACPPartnerPath = szInstallPath ^ "ACP" ^ "PartnerStyling";
		TextSubSetValue("<ASACPPARTNERPATH>", szASACPPartnerPath, TRUE);		
		
		szASACPGraphicsPath = szInstallPath ^ "ACP" ^ "Graphics";
		TextSubSetValue("<ASACPGRAPHICSPATH>", szASACPGraphicsPath, TRUE);		
end;  

function SetISSysPaths(szInstallPath, szISSysPath)
begin
		szISSysPath = szInstallPath ^ "System";
		TextSubSetValue("<ISSYSPATH>", szISSysPath, TRUE);  
end; 

function SetASSupportPaths(szInstallPath, szASSupportPath, szASSupportSQLPath)
begin
		szASSupportPath = szInstallPath ^ "Support";	
		TextSubSetValue("<ASSUPPORTPATH>", szASSupportPath, TRUE); 
		
		szASSupportSQLPath = szInstallPath ^ "Support" ^ "SQL_Scripts";	
		TextSubSetValue("<ASSUPPORTSQLPATH>", szASSupportSQLPath, TRUE); 
end;

function SetASRepackagerPaths(szInstallPath, szASRepackagerPath,szASRepackSysPath)
begin
		szASRepackagerPath = szInstallPath ^ "Repackager";	
		TextSubSetValue("<ASCLIENTREPACKAGERPATH>", szASRepackagerPath, TRUE); 
		
		szASRepackSysPath = szInstallPath ^ "Repackager" ^ "System";
		TextSubSetValue("<ASREPACKSYSPATH>", szASRepackSysPath, TRUE); 
				
end;

function SetASCommonPaths(szInstallPath, szASCommonPath)
begin
		szASCommonPath = szInstallPath ^ "Common";	
		TextSubSetValue("<ASCOMMONPATH>", szASCommonPath, TRUE); 
				
end;

function SetASFWServerPaths(szInstallPath, szASFWServerPath)
begin
		szASFWServerPath = szInstallPath ^ "FLEXwrap" ^ "Server";	
		TextSubSetValue("<ASFWSERVERPATH>", szASFWServerPath, TRUE); 
				
end;

function SetISProg0409Paths(szInstallPath, szISProg0409Path)
begin
		szISProg0409Path = szInstallPath ^ "Program" ^ "0409";
		TextSubSetValue("<ISPROGRAM0409PATH>", szISProg0409Path, TRUE);  
end;

function SetASHelp0409Paths(szInstallPath, szASHelp0409Path)
begin
		szASHelp0409Path = szInstallPath ^ "Program" ^ "0409";
		TextSubSetValue("<HELP0409UPDATEPATH>", szASHelp0409Path, TRUE);  
end;

function BackupUpdatedConflictSolverFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ISCMIDE.exe.bak2")) then 
		CopyFile(szPath ^ "ISCMIDE.exe", szPath ^ "ISCMIDE.exe.bak2");  
	else 
		CopyFile(szPath ^ "ISCMIDE.exe.bak2", szPath ^ "ISCMIDE.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reporting.Definition.dll.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reporting.Definition.dll", szPath ^ "AdminStudio.Reporting.Definition.dll.bak2");  
	else  
		CopyFile(szPath ^ "AdminStudio.Reporting.Definition.dll.bak2", szPath ^ "AdminStudio.Reporting.Definition.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reporting.Control.dll.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reporting.Control.dll", szPath ^ "AdminStudio.Reporting.Control.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Reporting.Control.dll.bak2", szPath ^ "AdminStudio.Reporting.Control.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reporting.ReportViewer.exe.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reporting.ReportViewer.exe", szPath ^ "AdminStudio.Reporting.ReportViewer.exe.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Reporting.ReportViewer.exe.bak2", szPath ^ "AdminStudio.Reporting.ReportViewer.exe");
	endif;	  
	
	if(!Is(FILE_EXISTS, szPath ^ "ISCMServices.dll.bak2")) then 
		CopyFile(szPath ^ "ISCMServices.dll", szPath ^ "ISCMServices.dll.bak2");  
	else  
		CopyFile(szPath ^ "ISCMServices.dll.bak2", szPath ^ "ISCMServices.dll");
	endif;	
end;

function BackupUpdatedConflictSolverSupportFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "isconflict.ace.bak2")) then 
		CopyFile(szPath ^ "isconflict.ace", szPath ^ "isconflict.ace.bak2");  
	else  
		CopyFile(szPath ^ "isconflict.ace.bak2", szPath ^ "isconflict.ace");
	endif;
end;

function BackupUpdatedConflictSolverRepDefFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reports.xml.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reports.xml", szPath ^ "AdminStudio.Reports.xml.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Reports.xml.bak2", szPath ^ "AdminStudio.Reports.xml");
	endif;
end;

function BackupUpdatedConflictSolverRepDefStorProcFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Reporting.StoredProcedures.sql.bak2")) then 
		CopyFile(szPath ^ "Reporting.StoredProcedures.sql", szPath ^ "Reporting.StoredProcedures.sql.bak2");  
	else    
		CopyFile(szPath ^ "Reporting.StoredProcedures.sql.bak2", szPath ^ "Reporting.StoredProcedures.sql");
	endif;
end;

function BackupUpdatedASRootFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reporting.Definition.dll.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reporting.Definition.dll", szPath ^ "AdminStudio.Reporting.Definition.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Reporting.Definition.dll.bak2", szPath ^ "AdminStudio.Reporting.Definition.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Reporting.Control.dll.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Reporting.Control.dll", szPath ^ "AdminStudio.Reporting.Control.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Reporting.Control.dll.bak2", szPath ^ "AdminStudio.Reporting.Control.dll");
	endif; 	
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.exe.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.exe", szPath ^ "AdminStudio.exe.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.exe.bak2", szPath ^ "AdminStudio.exe");
	endif; 	
	
	if(!Is(FILE_EXISTS, szPath ^ "ProcessTemplateEditor.exe.bak2")) then 
		CopyFile(szPath ^ "ProcessTemplateEditor.exe", szPath ^ "ProcessTemplateEditor.exe.bak2");  
	else    
		CopyFile(szPath ^ "ProcessTemplateEditor.exe.bak2", szPath ^ "ProcessTemplateEditor.exe");
	endif; 	
end;

function BackupUpdatedASWebFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ASShare.dll.bak2")) then 
		CopyFile(szPath ^ "ASShare.dll", szPath ^ "ASShare.dll.bak2");  
	else    
		CopyFile(szPath ^ "ASShare.dll.bak2", szPath ^ "ASShare.dll");
	endif; 
end;

function BackupUpdatedASPreDeployFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "PreDeploymentWizard.exe.bak2")) then 
		CopyFile(szPath ^ "PreDeploymentWizard.exe", szPath ^ "PreDeploymentWizard.exe.bak2");  
	else    
		CopyFile(szPath ^ "PreDeploymentWizard.exe.bak2", szPath ^ "PreDeploymentWizard.exe");
	endif; 
end;

function BackupUpdatedASACPFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "aokCndtn.dll.bak2")) then 
		CopyFile(szPath ^ "aokCndtn.dll", szPath ^ "aokCndtn.dll.bak2");  
	else    
		CopyFile(szPath ^ "aokCndtn.dll.bak2", szPath ^ "aokCndtn.dll");
	endif;	

	if(!Is(FILE_EXISTS, szPath ^ "aokCrwlV1.dll.bak2")) then 
		CopyFile(szPath ^ "aokCrwlV1.dll", szPath ^ "aokCrwlV1.dll.bak2");  
	else  
		CopyFile(szPath ^ "aokCrwlV1.dll.bak2", szPath ^ "aokCrwlV1.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AOKFixBase.dll.bak2")) then 
		CopyFile(szPath ^ "AOKFixBase.dll", szPath ^ "AOKFixBase.dll.bak2");  
	else  
		CopyFile(szPath ^ "AOKFixBase.dll.bak2", szPath ^ "AOKFixBase.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokGen.dll.bak2")) then 
		CopyFile(szPath ^ "aokGen.dll", szPath ^ "aokGen.dll.bak2");  
	else   
		CopyFile(szPath ^ "aokGen.dll.bak2", szPath ^ "aokGen.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokJInt.dll.bak2")) then 
		CopyFile(szPath ^ "aokJInt.dll", szPath ^ "aokJInt.dll.bak2");  
	else    
		CopyFile(szPath ^ "aokJInt.dll.bak2", szPath ^ "aokJInt.dll");
	endif;
		
	if(!Is(FILE_EXISTS, szPath ^ "AOKPackager.exe.bak2")) then 
		CopyFile(szPath ^ "AOKPackager.exe", szPath ^ "AOKPackager.exe.bak2");  
	else    
		CopyFile(szPath ^ "AOKPackager.exe.bak2", szPath ^ "AOKPackager.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokPE.dll.bak2")) then 
		CopyFile(szPath ^ "aokPE.dll", szPath ^ "aokPE.dll.bak2");  
	else    
		CopyFile(szPath ^ "aokPE.dll.bak2", szPath ^ "aokPE.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "aokRadia.dll.bak2")) then 
		CopyFile(szPath ^ "aokRadia.dll", szPath ^ "aokRadia.dll.bak2");  
	else  
		CopyFile(szPath ^ "aokRadia.dll.bak2", szPath ^ "aokRadia.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AOKRegSvrOv.exe.bak2")) then 
		CopyFile(szPath ^ "AOKRegSvrOv.exe", szPath ^ "AOKRegSvrOv.exe.bak2");  
	else    
		CopyFile(szPath ^ "AOKRegSvrOv.exe.bak2", szPath ^ "AOKRegSvrOv.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokSft.dll.bak2")) then 
		CopyFile(szPath ^ "aokSft.dll", szPath ^ "aokSft.dll.bak2");  
	else 
		CopyFile(szPath ^ "aokSft.dll.bak2", szPath ^ "aokSft.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokSft.dll.bak2")) then 
		CopyFile(szPath ^ "aokSft.dll", szPath ^ "aokSft.dll.bak2");  
	else 
		CopyFile(szPath ^ "aokSft.dll.bak2", szPath ^ "aokSft.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokSSO.exe.bak2")) then 
		CopyFile(szPath ^ "aokSSO.exe", szPath ^ "aokSSO.exe.bak2");  
	else  
		CopyFile(szPath ^ "aokSSO.exe.bak2", szPath ^ "aokSSO.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aokVwr.dll.bak2")) then 
		CopyFile(szPath ^ "aokVwr.dll", szPath ^ "aokVwr.dll.bak2");  
	else  
		CopyFile(szPath ^ "aokVwr.dll.bak2", szPath ^ "aokVwr.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "CBCommon.dll.bak2")) then 
		CopyFile(szPath ^ "CBCommon.dll", szPath ^ "CBCommon.dll.bak2");  
	else   
		CopyFile(szPath ^ "CBCommon.dll.bak2", szPath ^ "CBCommon.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "csExWB.dll.bak2")) then 
		CopyFile(szPath ^ "csExWB.dll", szPath ^ "csExWB.dll.bak2");  
	else   
		CopyFile(szPath ^ "csExWB.dll.bak2", szPath ^ "csExWB.dll");
	endif;	
		
	if(!Is(FILE_EXISTS, szPath ^ "DllExport.dll.bak2")) then 
		CopyFile(szPath ^ "DllExport.dll", szPath ^ "DllExport.dll.bak2");  
	else   
		CopyFile(szPath ^ "DllExport.dll.bak2", szPath ^ "DllExport.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Jint.dll.bak2")) then 
		CopyFile(szPath ^ "Jint.dll", szPath ^ "Jint.dll.bak2");  
	else  
		CopyFile(szPath ^ "Jint.dll.bak2", szPath ^ "Jint.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "OEM.xml.bak2")) then 
		CopyFile(szPath ^ "OEM.xml", szPath ^ "OEM.xml.bak2");  
	else   
		CopyFile(szPath ^ "OEM.xml.bak2", szPath ^ "OEM.xml");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "PartnerStyle.xml.bak2")) then 
		CopyFile(szPath ^ "PartnerStyle.xml", szPath ^ "PartnerStyle.xml.bak2");  
	else 
		CopyFile(szPath ^ "PartnerStyle.xml.bak2", szPath ^ "PartnerStyle.xml");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "SqlCompression.dll.bak2")) then 
		CopyFile(szPath ^ "SqlCompression.dll", szPath ^ "SqlCompression.dll.bak2");  
	else 
		CopyFile(szPath ^ "SqlCompression.dll.bak2", szPath ^ "SqlCompression.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "WorkBench.exe.bak2")) then 
		CopyFile(szPath ^ "WorkBench.exe", szPath ^ "WorkBench.exe.bak2");  
	else 
		CopyFile(szPath ^ "WorkBench.exe.bak2", szPath ^ "WorkBench.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll.bak2")) then 
		CopyFile(szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll", szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll.bak2");  
	else   
		CopyFile(szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll.bak2", szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm.bak2")) then 
		CopyFile(szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm", szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm.bak2");  
	else   
		CopyFile(szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm.bak2", szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Graphics" ^ "AOK Activation Page.url.bak2")) then 
		CopyFile(szPath ^ "Graphics" ^ "AOK Activation Page.url", szPath ^ "Graphics" ^ "AOK Activation Page.url.bak2");  
	else   
		CopyFile(szPath ^ "Graphics" ^ "AOK Activation Page.url.bak2", szPath ^ "Graphics" ^ "AOK Activation Page.url");
	endif;	
end;

function BackupUpdatedRepackagerFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Repack.exe.bak2")) then 
		CopyFile(szPath ^ "Repack.exe", szPath ^ "Repack.exe.bak2");
	else
		CopyFile(szPath ^ "Repack.exe.bak2", szPath ^ "Repack.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "aacxide.exe.bak2")) then 
		CopyFile(szPath ^ "aacxide.exe", szPath ^ "aacxide.exe.bak2");
	else
	    CopyFile(szPath ^ "aacxide.exe.bak2", szPath ^ "aacxide.exe");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "aacx.exe.bak2")) then 
		CopyFile(szPath ^ "aacx.exe", szPath ^ "aacx.exe.bak2");
	else
	    CopyFile(szPath ^ "aacx.exe.bak2", szPath ^ "aacx.exe");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "islc.exe.bak2")) then 
		CopyFile(szPath ^ "islc.exe", szPath ^ "islc.exe.bak2");
	else
	    CopyFile(szPath ^ "islc.exe.bak2", szPath ^ "islc.exe");
	endif;
	
		if(!Is(FILE_EXISTS, szPath ^ "SpyEngine.dll.bak2")) then 
		CopyFile(szPath ^ "SpyEngine.dll", szPath ^ "SpyEngine.dll.bak2");
	else
		CopyFile(szPath ^ "SpyEngine.dll.bak2", szPath ^ "SpyEngine.dll");	
	endif;

	if(!Is(FILE_EXISTS, szPath ^ "xniSpy32.dll.bak2")) then 
		CopyFile(szPath ^ "xniSpy32.dll", szPath ^ "xniSpy32.dll.bak2");
	else
	    CopyFile(szPath ^ "xniSpy32.dll.bak2", szPath ^ "xniSpy32.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Admin6.bld.bak2")) then 
		CopyFile(szPath ^ "Admin6.bld", szPath ^ "Admin6.bld.bak2");  
	else    
		CopyFile(szPath ^ "Admin6.bld.bak2", szPath ^ "Admin6.bld");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "Admin5.bld.bak2")) then 
		CopyFile(szPath ^ "Admin5.bld", szPath ^ "Admin5.bld.bak2");  
	else    
		CopyFile(szPath ^ "Admin5.bld.bak2", szPath ^ "Admin5.bld");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework.dll.bak2")) then 
		CopyFile(szPath ^ "AdminUIFramework.dll", szPath ^ "AdminUIFramework.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminUIFramework.dll.bak2", szPath ^ "AdminUIFramework.dll");
	endif;

end;

function BackupUpdatedClientSysFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "VirtConv.dll.bak2")) then 
		CopyFile(szPath ^ "VirtConv.dll", szPath ^ "VirtConv.dll.bak2");
	else
		CopyFile(szPath ^ "VirtConv.dll.bak2", szPath ^ "VirtConv.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "AppV.xml.bak2")) then 
		CopyFile(szPath ^ "AppV.xml", szPath ^ "AppV.xml.bak2");
	else
		CopyFile(szPath ^ "AppV.xml.bak2", szPath ^ "AppV.xml");
	endif; 
end;

function BackupUpdatedASCommonFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "ISUIConflictServices.dll.bak2")) then 
		CopyFile(szPath ^ "ISUIConflictServices.dll", szPath ^ "ISUIConflictServices.dll.bak2");  
	else    
		CopyFile(szPath ^ "ISUIConflictServices.dll.bak2", szPath ^ "ISUIConflictServices.dll");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "ISUIConflictServices9.dll.bak2")) then 
		CopyFile(szPath ^ "ISUIConflictServices9.dll", szPath ^ "ISUIConflictServices9.dll.bak2");  
	else    
		CopyFile(szPath ^ "ISUIConflictServices9.dll.bak2", szPath ^ "ISUIConflictServices9.dll");
	endif; 		
	
	if(!Is(FILE_EXISTS, szPath ^ "Distributer.exe.bak2")) then 
		CopyFile(szPath ^ "Distributer.exe", szPath ^ "Distributer.exe.bak2");  
	else    
		CopyFile(szPath ^ "Distributer.exe.bak2", szPath ^ "Distributer.exe");
	endif; 	
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminStudio.Shared.dll.bak2")) then 
		CopyFile(szPath ^ "AdminStudio.Shared.dll", szPath ^ "AdminStudio.Shared.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminStudio.Shared.dll.bak2", szPath ^ "AdminStudio.Shared.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "NovellDistribution.exe.bak2")) then 
		CopyFile(szPath ^ "NovellDistribution.exe", szPath ^ "NovellDistribution.exe.bak2");  
	else    
		CopyFile(szPath ^ "NovellDistribution.exe.bak2", szPath ^ "NovellDistribution.exe");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework.dll.bak2")) then 
		CopyFile(szPath ^ "AdminUIFramework.dll", szPath ^ "AdminUIFramework.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminUIFramework.dll.bak2", szPath ^ "AdminUIFramework.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework_libFNP.dll.bak2")) then 
		CopyFile(szPath ^ "AdminUIFramework_libFNP.dll", szPath ^ "AdminUIFramework_libFNP.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminUIFramework_libFNP.dll.bak2", szPath ^ "AdminUIFramework_libFNP.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework9.dll.bak2")) then 
		CopyFile(szPath ^ "AdminUIFramework9.dll", szPath ^ "AdminUIFramework9.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminUIFramework9.dll.bak2", szPath ^ "AdminUIFramework9.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "AdminUIFramework9_libFNP.dll.bak2")) then 
		CopyFile(szPath ^ "AdminUIFramework9_libFNP.dll", szPath ^ "AdminUIFramework9_libFNP.dll.bak2");  
	else    
		CopyFile(szPath ^ "AdminUIFramework9_libFNP.dll.bak2", szPath ^ "AdminUIFramework9_libFNP.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "CatalogServices9.dll.bak2")) then 
		CopyFile(szPath ^ "CatalogServices9.dll", szPath ^ "CatalogServices9.dll.bak2");  
	else    
		CopyFile(szPath ^ "CatalogServices9.dll.bak2", szPath ^ "CatalogServices9.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "CatalogServices.dll.bak2")) then 
		CopyFile(szPath ^ "CatalogServices.dll", szPath ^ "CatalogServices.dll.bak2");  
	else    
		CopyFile(szPath ^ "CatalogServices.dll.bak2", szPath ^ "CatalogServices.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "ASFileOpen9.dll.bak2")) then 
		CopyFile(szPath ^ "ASFileOpen9.dll", szPath ^ "ASFileOpen9.dll.bak2");  
	else    
		CopyFile(szPath ^ "ASFileOpen9.dll.bak2", szPath ^ "ASFileOpen9.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "ASFileOpen.dll.bak2")) then 
		CopyFile(szPath ^ "ASFileOpen.dll", szPath ^ "ASFileOpen.dll.bak2");  
	else    
		CopyFile(szPath ^ "ASFileOpen.dll.bak2", szPath ^ "ASFileOpen.dll");
	endif;	
	
	if(!Is(FILE_EXISTS, szPath ^ "msihelper.dll.bak2")) then 
		CopyFile(szPath ^ "msihelper.dll", szPath ^ "msihelper.dll.bak2");  
	else    
		CopyFile(szPath ^ "msihelper.dll.bak2", szPath ^ "msihelper.dll");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "ISCMServices.dll.bak2")) then 
		CopyFile(szPath ^ "ISCMServices.dll", szPath ^ "ISCMServices.dll.bak2");  
	else    
		CopyFile(szPath ^ "ISCMServices.dll.bak2", szPath ^ "ISCMServices.dll");
	endif;
end;

function BackupUpdatedSupportFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Upgrade.xml.bak2")) then 
		CopyFile(szPath ^ "Upgrade.xml", szPath ^ "Upgrade.xml.bak2");  
	else    
		CopyFile(szPath ^ "Upgrade.xml.bak2", szPath ^ "Upgrade.xml");
	endif; 
end;

function BackupUpdatedSupportSQLFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Reporting.StoredProcedures.sql.bak2")) then 
		CopyFile(szPath ^ "Reporting.StoredProcedures.sql", szPath ^ "Reporting.StoredProcedures.sql.bak2");  
	else    
		CopyFile(szPath ^ "Reporting.StoredProcedures.sql.bak2", szPath ^ "Reporting.StoredProcedures.sql");
	endif; 
	
	if(!Is(FILE_EXISTS, szPath ^ "AMS_System_Schema.SQL.bak2")) then 
		CopyFile(szPath ^ "AMS_System_Schema.SQL", szPath ^ "AMS_System_Schema.SQL.bak2");  
	else    
		CopyFile(szPath ^ "AMS_System_Schema.SQL.bak2", szPath ^ "AMS_System_Schema.SQL");
	endif;
	
	if(!Is(FILE_EXISTS, szPath ^ "Seed_Data.SQL.bak2")) then 
		CopyFile(szPath ^ "Seed_Data.SQL", szPath ^ "Seed_Data.SQL.bak2");  
	else    
		CopyFile(szPath ^ "Seed_Data.SQL.bak2", szPath ^ "Seed_Data.SQL");
	endif;  	
end;

function BackupUpdatedFlexwrapServerFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Eval.lic.bak2")) then 
		CopyFile(szPath ^ "Eval.lic", szPath ^ "Eval.lic.bak2");  
	else    
		CopyFile(szPath ^ "Eval.lic.bak2", szPath ^ "Eval.lic");
	endif; 
end;

function BackupUpdatedHelpFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "Virtual.chm.bak2")) then 
		CopyFile(szPath ^ "Virtual.chm", szPath ^ "Virtual.chm.bak2");  
	else    
		CopyFile(szPath ^ "Virtual.chm.bak2", szPath ^ "Virtual.chm");
	endif; 
end;

function BackupUpdatedPkgExpertFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "PackageExpert.exe.bak2")) then 
		CopyFile(szPath ^ "PackageExpert.exe", szPath ^ "PackageExpert.exe.bak2");  
	else  
		CopyFile(szPath ^ "PackageExpert.exe.bak2", szPath ^ "PackageExpert.exe");
	endif;
end;

function BackupUpdatedJobMgrEngineFiles(szPath)
begin
	if(!Is(FILE_EXISTS, szPath ^ "JobManagerEngine.exe.bak2")) then 
		CopyFile(szPath ^ "JobManagerEngine.exe", szPath ^ "JobManagerEngine.exe.bak2");  
	else  
		CopyFile(szPath ^ "JobManagerEngine.exe.bak2", szPath ^ "JobManagerEngine.exe");
	endif;
end;

function BackupUpdatedConflictSolverRDLCFiles(szPath, bInstall)
	string svFileSpec,svMatchingFileName,svFileName,svDirectory;
	number nNumFiles, nResult;
begin
	if (bInstall) then
		svFileSpec = "*.rdlc";	
	else
		svFileSpec = "*.rdlc.bak2";
	endif;

    nResult = FindAllFiles (szPath, svFileSpec, svMatchingFileName, RESET); 
	while(nResult = 0) 
		if (bInstall) then
			CopyFile(svMatchingFileName, svMatchingFileName + ".bak2");  
		else    
			ParsePath(svFileName, svMatchingFileName, FILENAME_ONLY);
			ParsePath(svDirectory, svMatchingFileName, PATH);
			CopyFile(svMatchingFileName, svDirectory ^ svFileName);
		endif; 

        // Increment the file counter. 
        nNumFiles = nNumFiles + 1; 
        // Find the next matching file name. 
        nResult = FindAllFiles(szPath, svFileSpec, svMatchingFileName, CONTINUE); 
    endwhile; 
    FindAllFiles(szPath, svFileSpec, svMatchingFileName, CANCEL); 

end;

function DeleteASRootFiles(szPath)
begin
	DeleteFile(szPath ^ "AdminStudio.Reporting.Definition.dll.bak2");
	DeleteFile(szPath ^ "AdminStudio.Reporting.Control.dll.bak2");
	DeleteFile(szPath ^ "AdminStudio.exe.bak2");
	DeleteFile(szPath ^ "ProcessTemplateEditor.exe.bak2");
end;  

function DeleteUpdatedConflictSolverFiles(szPath)
begin
	DeleteFile(szPath ^ "ISCMIDE.exe.bak2");
	DeleteFile(szPath ^ "AdminStudio.Reporting.Definition.dll.bak2");
	DeleteFile(szPath ^ "AdminStudio.Reporting.ReportViewer.exe.bak2");
	DeleteFile(szPath ^ "AdminStudio.Reporting.Control.dll.bak2");
	DeleteFile(szPath ^ "ISCMServices.dll.bak2");
end;

function DeleteASWebFiles(szPath)
begin
	DeleteFile(szPath ^ "ASShare.dll.bak2");
end; 

function DeleteASPreDeployFiles(szPath)
begin
	DeleteFile(szPath ^ "PreDeploymentWizard.exe.bak2");
end; 

function DeleteASACPFiles(szPath)
begin
	DeleteFile(szPath ^ "aokCndtn.dll.bak2");	
	DeleteFile(szPath ^ "aokCrwlV1.dll.bak2");
	DeleteFile(szPath ^ "AOKFixBase.dll.bak2");
	DeleteFile(szPath ^ "aokGen.dll.bak2");
	DeleteFile(szPath ^ "aokJInt.dll.bak2");
	DeleteFile(szPath ^ "AOKPackager.exe.bak2");
	DeleteFile(szPath ^ "aokPE.dll.bak2");
	DeleteFile(szPath ^ "aokRadia.dll.bak2");
	DeleteFile(szPath ^ "AOKRegSvrOv.exe.bak2");
	DeleteFile(szPath ^ "aokSft.dll.bak2");
	DeleteFile(szPath ^ "aokSSO.exe.bak2");
	DeleteFile(szPath ^ "aokVwr.dll.bak2");
	DeleteFile(szPath ^ "CBCommon.dll.bak2");
	DeleteFile(szPath ^ "csExWB.dll.bak2");
	DeleteFile(szPath ^ "DllExport.dll.bak2");	
	DeleteFile(szPath ^ "Jint.dll.bak2");
	DeleteFile(szPath ^ "OEM.xml.bak2");
	DeleteFile(szPath ^ "PartnerStyle.xml.bak2");
	DeleteFile(szPath ^ "SqlCompression.dll.bak2");
	DeleteFile(szPath ^ "Fix" ^ "1.0.9.0" ^ "AOKFix.dll.bak2");
	DeleteFile(szPath ^ "PartnerStyling" ^ "CompatibilitySolverHelp.chm.bak2");
	DeleteFile(szPath ^ "Graphics" ^ "AOK Activation Page.url.bak2");		
	DeleteFile(szPath ^ "WorkBench.exe.bak2");
end;

function DeleteUpdatedClientSysFiles(szPath)
begin  
	DeleteFile(szPath ^ "VirtConv.dll.bak2");
	DeleteFile(szPath ^ "AppV.xml.bak2");
end;

function DeleteUpdatedClientRepackagerFiles(szPath)
begin
	DeleteFile(szPath ^ "Repack.exe.bak2");
	DeleteFile(szPath ^ "aacxide.exe.bak2");
	DeleteFile(szPath ^ "aacx.exe.bak2");
	DeleteFile(szPath ^ "islc.exe.bak2");
	DeleteFile(szPath ^ "SpyEngine.dll.bak2");
	DeleteFile(szPath ^ "xniSpy32.dll.bak2");
	DeleteFile(szPath ^ "Admin5.bld.bak2");
	DeleteFile(szPath ^ "Admin6.bld.bak2");
	DeleteFile(szPath ^ "AdminUIFramework.dll.bak2");
end;

function DeleteUpdatedASCommonFiles(szPath)
begin
	DeleteFile(szPath ^ "ISUIConflictServices.dll.bak2");
	DeleteFile(szPath ^ "ISUIConflictServices9.dll.bak2");
	DeleteFile(szPath ^ "Distributer.exe.bak2");
	DeleteFile(szPath ^ "AdminStudio.Shared.dll.bak2");
	DeleteFile(szPath ^ "NovellDistribution.exe.bak2");
	DeleteFile(szPath ^ "AdminUIFramework.dll.bak2");
	DeleteFile(szPath ^ "AdminUIFramework_libFNP.dll.bak2");
	DeleteFile(szPath ^ "AdminUIFramework9.dll.bak2");
	DeleteFile(szPath ^ "AdminUIFramework9_libFNP.dll.bak2");
	DeleteFile(szPath ^ "CatalogServices9.dll.bak2");
	DeleteFile(szPath ^ "CatalogServices.dll.bak2");
	DeleteFile(szPath ^ "ASFileOpen9.dll.bak2");
	DeleteFile(szPath ^ "ASFileOpen.dll.bak2");
	DeleteFile(szPath ^ "AdminStudio.Shared.dll.bak2");
	DeleteFile(szPath ^ "msihelper.dll.bak2");
	DeleteFile(szPath ^ "ISCMServices.dll.bak2");
end;  

function DeleteUpdatedFWServerFiles(szPath)
begin
	DeleteFile(szPath ^ "Eval.lic.bak2");
end;

function DeleteUpdatedSupportSQLFiles(szPath)
begin
	DeleteFile(szPath ^ "Reporting.StoredProcedures.sql.bak2");
	DeleteFile(szPath ^ "AMS_System_Schema.SQL.bak2");
	DeleteFile(szPath ^ "Seed_Data.SQL.bak2");
end;

function DeleteUpdatedSupportFiles(szPath)
begin
	DeleteFile(szPath ^ "Upgrade.xml.bak2");
end;

function DeleteUpdatedConflictSolverSupportFiles(szPath)
begin
	DeleteFile(szPath ^ "isconflict.ace.bak2");
end;

function DeleteUpdatedConflictSolverRepDefFiles(szPath)
begin
	DeleteFile(szPath ^ "AdminStudio.Reports.xml.bak2");
end;

function DeleteUpdatedConflictSolverRepDefStorProcFiles(szPath)
begin
	DeleteFile(szPath ^ "Reporting.StoredProcedures.sql.bak2");
end;

function DeleteUpdatedHelpFiles(szPath)
begin
	DeleteFile(szPath ^ "Virtual.chm.bak2");
end;

function DeleteUpdatedPkgExpertFiles(szPath)
begin
	DeleteFile(szPath ^ "PackageExpert.exe.bak2");
end;

function DeleteUpdatedJobMgrEngineFiles(szPath)
begin
	DeleteFile(szPath ^ "JobManagerEngine.exe.bak2");
end;

function DeleteUpdatedConflictSolverRDLCFiles(szPath)
	string svFileSpec,svMatchingFileName;
	number nNumFiles, nResult;
begin
	svFileSpec = "*.rdlc.bak2";
	
    nResult = FindAllFiles (szPath, svFileSpec, svMatchingFileName, RESET); 

    while(nResult = 0) 
		DeleteFile(svMatchingFileName);

        // Increment the file counter. 
        nNumFiles = nNumFiles + 1; 
        // Find the next matching file name. 
        nResult = FindAllFiles(szPath, svFileSpec, svMatchingFileName, CONTINUE); 
        
    endwhile; 
    FindAllFiles(szPath, svFileSpec, svMatchingFileName, CANCEL); 

end;

function UpdateRegKey()
	string szACEList;
	number nBufferSize;
begin
	nBufferSize = MAX_PATH;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	szACEList = "ACE04;ACE05:ACE06;WTS01;WTS02;WTS03;WTS04;WTS05;WTS06;WTS07;WTS08;WTS09";	
	
	RegDBSetKeyValueEx("Software\\InstallShield\\AdminStudio\\ConflictSolver\\10.0\\Main", "BestACEList", REGDB_STRING, szACEList, nBufferSize); 
end;

function UpdateRepackagerRenamedFiles(szPath)
begin
	if(Is(FILE_EXISTS, szPath ^ "AdminUIFramework.dll")) then 
		CopyFile(szPath ^ "Admin5.bld", szPath ^ "AdminUIFramework.dll");
		DeleteFile(szPath ^ "Admin5.bld");  
	endif;
end;

